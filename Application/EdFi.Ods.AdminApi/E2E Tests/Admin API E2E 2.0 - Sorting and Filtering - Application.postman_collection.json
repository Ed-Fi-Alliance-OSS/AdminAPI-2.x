{
	"info": {
		"_postman_id": "5a03859f-6360-44de-a208-18bcc4c6d0b9",
		"name": "Admin API E2E 2.0 - Sorting and Filtering - Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5260609"
	},
	"item": [
		{
			"name": "Get Applications order by ApplicationName Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Applications: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const results = pm.response.json();\r",
							"\r",
							"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Applications: Response result is ordered by ApplicationName asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [application => application.applicationName.toLowerCase()],['asc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}&orderBy=applicationName&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"applications"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "applicationName"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Applications order by ApplicationName Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Applications: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const results = pm.response.json();\r",
							"\r",
							"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Applications: Response result is ordered by ApplicationName desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [application => application.applicationName.toLowerCase()],['desc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}&orderBy=applicationName&direction=DESC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"applications"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "applicationName"
						},
						{
							"key": "direction",
							"value": "DESC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Applications order by ClaimsetName Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Applications: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const results = pm.response.json();\r",
							"\r",
							"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Applications: Response result is ordered by ClaimsetName asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [application => application.claimSetName.toLowerCase()],['asc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}&orderBy=claimsetName&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"applications"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "claimsetName"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Applications order by ClaimsetName Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Applications: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const results = pm.response.json();\r",
							"\r",
							"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Applications: Response result is ordered by ClaimSetName Name desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [application => application.claimSetName.toLowerCase()],['desc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}&orderBy=claimsetName&direction=DESC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"applications"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "claimsetName"
						},
						{
							"key": "direction",
							"value": "DESC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances filter by Application Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Applications: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const results = pm.response.json();\r",
							"\r",
							"pm.test(\"GET Applications: Response result includes application\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Applications: Response result contains requested application\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].applicationName).to.eql(pm.collectionVariables.get(\"FILTERAPPLICATIONNAME\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}&applicationName={{FILTERAPPLICATIONNAME}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"applications"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "applicationName",
							"value": "{{FILTERAPPLICATIONNAME}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances filter by Claimset Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Applications: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const results = pm.response.json();\r",
							"\r",
							"pm.test(\"GET Applications: Response result includes application\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Applications: Response result contains requested application\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].applicationName).to.eql(pm.collectionVariables.get(\"FILTERAPPLICATIONNAME\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}&claimsetName={{FILTERCLAIMSETNAME}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"applications"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "claimsetName",
							"value": "{{FILTERCLAIMSETNAME}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/// -------\r",
					"/// Authentication\r",
					"/// -------\r",
					"\r",
					"function generateClientSecret() {\r",
					"    const minLength = 32;\r",
					"    const maxLength = 128;\r",
					"    let result = '';\r",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';\r",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
					"\r",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');\r",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r",
					"    result += randomChar('0123456789');\r",
					"    result += randomChar(specialCharacters);\r",
					"\r",
					"    for (let i = result.length; i < length; i++) {\r",
					"        const charactersPlusSpecial = characters + specialCharacters;\r",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));\r",
					"    }\r",
					"\r",
					"    return shuffleString(result);\r",
					"}\r",
					"\r",
					"function randomChar(str) {\r",
					"    return str.charAt(Math.floor(Math.random() * str.length));\r",
					"}\r",
					"\r",
					"function shuffleString(str) {\r",
					"    const array = str.split('');\r",
					"    for (let i = array.length - 1; i > 0; i--) {\r",
					"        const j = Math.floor(Math.random() * (i + 1));\r",
					"        [array[i], array[j]] = [array[j], array[i]];\r",
					"    }\r",
					"    return array.join('');\r",
					"}\r",
					"\r",
					"let guid = pm.variables.replaceIn('{{$guid}}');\r",
					"let client_secret =  generateClientSecret();\r",
					"\r",
					"let header = {\r",
					"    'Content-Type': 'application/x-www-form-urlencoded'\r",
					"};\r",
					"\r",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
					"}\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,\r",
					"    method: 'POST',\r",
					"    header: header,\r",
					"    body: {\r",
					"        mode: 'urlencoded',\r",
					"        urlencoded: [\r",
					"            {key: 'ClientId', value: guid },\r",
					"            {key: 'ClientSecret', value: client_secret },\r",
					"            {key: 'DisplayName', value: guid }\r",
					"        ]\r",
					"    }\r",
					"},\r",
					"    (err, res) => {\r",
					"        error = res.json().error\r",
					"        if(error) {\r",
					"            throw res.json().error_description\r",
					"        }\r",
					"\r",
					"        pm.sendRequest({\r",
					"            url: `${pm.variables.get(\"API_URL\")}/connect/token`,\r",
					"            method: 'POST',\r",
					"            header: header,\r",
					"            body: {\r",
					"                mode: 'urlencoded',\r",
					"                urlencoded: [\r",
					"                    {key: 'client_id', value: guid },\r",
					"                    {key: 'client_secret', value: client_secret },\r",
					"                    {key: 'grant_type', value: \"client_credentials\"},\r",
					"                    {key: 'scope', value: \"edfi_admin_api/full_access\"}\r",
					"                ]\r",
					"            }\r",
					"        },\r",
					"            (err, res) => {\r",
					"                error = res.json().error\r",
					"                if(error) {\r",
					"                    throw res.json().error_description\r",
					"                }\r",
					"                pm.collectionVariables.set(\"TOKEN\", res.json().access_token);\r",
					"                createApplications();\r",
					"            });\r",
					"});\r",
					"\r",
					"/// -------\r",
					"/// Vendors\r",
					"/// -------\r",
					"\r",
					"function generateAlphanumericString() {\r",
					"    const minLength = 8;\r",
					"    const maxLength = 24;\r",
					"    let result = '';\r",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
					"\r",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');\r",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r",
					"    result += randomChar('0123456789');\r",
					"\r",
					"    for (let i = result.length; i < length; i++) {\r",
					"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
					"    }\r",
					"\r",
					"    return shuffleString(result);\r",
					"}\r",
					"\r",
					"function generateApplicationName() {\r",
					"    return generateAlphanumericString();\r",
					"}\r",
					"\r",
					"function generateClaimsetName() {\r",
					"    return generateAlphanumericString();\r",
					"}\r",
					"\r",
					"function createApplications() {\r",
					"    header = {\r",
					"        'Content-Type': 'application/json',\r",
					"        'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
					"    };\r",
					"\r",
					"    if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
					"        header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
					"        pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
					"    }\r",
					"\r",
					"    for (let i = 0; i <= 0; i++) {\r",
					"    \r",
					"        /// Vendor\r",
					"        pm.sendRequest({\r",
					"            url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
					"            method: 'POST',\r",
					"            header: header,\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify({ \"company\": generateAlphanumericString(), \"namespacePrefixes\": `uri://${generateAlphanumericString()}.org`, \"contactName\": generateAlphanumericString(), \"contactEmailAddress\": `${generateAlphanumericString()}@test-ed-fi.org` })\r",
					"            }\r",
					"        }, (err, res) => {\r",
					"            let location = res.headers.get('location');\r",
					"            let matches = location.match(/(\\d+)/);\r",
					"            let vendorId = parseInt(matches[0], 10); \r",
					"            \r",
					"            let claimsetName = generateAlphanumericString();\r",
					"\r",
					"            /// Claimset\r",
					"            pm.sendRequest({\r",
					"                url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
					"                method: 'POST',\r",
					"                header: header,\r",
					"                body: {\r",
					"                    mode: 'raw',\r",
					"                    raw: JSON.stringify({ \"name\": claimsetName })\r",
					"                }\r",
					"            }, (err, res) => {\r",
					"\r",
					"                /// ods instance\r",
					"                pm.sendRequest({\r",
					"                    url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances`,\r",
					"                    method: 'POST',\r",
					"                    header: header,\r",
					"                    body: {\r",
					"                        mode: 'raw',\r",
					"                        raw: JSON.stringify({ \"name\": generateAlphanumericString(), \"instanceType\": 'postgresql', \"connectionString\": pm.variables.get(\"connectionString\") })\r",
					"                    }\r",
					"                }, (err, res) => {\r",
					"                    let location = res.headers.get('location');\r",
					"                    let matches = location.match(/(\\d+)/);\r",
					"                    let odsInstanceId = parseInt(matches[0], 10); \r",
					"\r",
					"                    /// Applications\r",
					"                    let applicationName =  generateApplicationName();\r",
					"\r",
					"                    pm.collectionVariables.set(\"FILTERAPPLICATIONNAME\", applicationName);\r",
					"                    pm.collectionVariables.set(\"FILTERCLAIMSETNAME\", claimsetName);\r",
					"\r",
					"                    pm.sendRequest({\r",
					"                        url: `${pm.variables.get(\"API_URL\")}/v2/applications`,\r",
					"                        method: 'POST',\r",
					"                        header: header,\r",
					"                        body: {\r",
					"                            mode: 'raw',\r",
					"                            raw: JSON.stringify({ \"applicationName\": applicationName, \"vendorId\": vendorId, \"claimSetName\": claimsetName, 'educationOrganizationIds': [ 0 ], \"odsInstanceIds\": [ odsInstanceId ]})\r",
					"                        }\r",
					"                    }, (err, res) => {\r",
					"                        error = res.json().error\r",
					"                        if(error) {\r",
					"                            throw res.json().error_description\r",
					"                        }\r",
					"                    });\r",
					"               });\r",
					"            });\r",
					"        });\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"header = {\r",
					"    'Content-Type': 'application/json',\r",
					"    'Accept': '*/*',\r",
					"    'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
					"};\r",
					"\r",
					"function deleteApplication(application) {\r",
					"    \r",
					"    pm.sendRequest({\r",
					"        url: `${pm.variables.get(\"API_URL\")}/v2/applications/${application.id}`,\r",
					"        method: 'DELETE',\r",
					"        header: header\r",
					"    }, function (err, res) {\r",
					"        var jsonData = res.json();\r",
					"        if (err) {\r",
					"            console.log(err);\r",
					"        }\r",
					"        pm.sendRequest({\r",
					"            url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances/${application.odsInstanceIds[0]}`,\r",
					"            method: 'DELETE',\r",
					"            header: header\r",
					"        }, function (err, res) {\r",
					"            var jsonData = res.json();\r",
					"            if (err) {\r",
					"                console.log(err);\r",
					"            }\r",
					"            pm.sendRequest({\r",
					"                url: `${pm.variables.get(\"API_URL\")}/v2/vendors/${application.vendorId}`,\r",
					"                method: 'DELETE',\r",
					"                header: header\r",
					"            }, function (err, res) {\r",
					"                var jsonData = res.json();\r",
					"                if (err) {\r",
					"                    console.log(err);\r",
					"                }\r",
					"            });\r",
					"        });\r",
					"    });\r",
					"}\r",
					"\r",
					"function deleteApplications() {\r",
					"    pm.sendRequest({\r",
					"        url: `${pm.variables.get(\"API_URL\")}/v2/applications?offset=0&limit=500`,\r",
					"        method: 'GET',\r",
					"        header: header\r",
					"    }, function (err, res) {\r",
					"        var results = res.json();\r",
					"        if (err) {\r",
					"            console.log(err);\r",
					"        }\r",
					"\r",
					"        for (let i = 0; i < results.length; i++) {\r",
					"            let application = results[i];\r",
					"            setTimeout(function(){\r",
					"                deleteApplication(application);\r",
					"            }, 5000);\r",
					"        }\r",
					"    });\r",
					"\r",
					"    const results = pm.response.json();\r",
					"}\r",
					"\r",
					"setTimeout(function(){\r",
					"    deleteApplications();\r",
					"}, 5000);\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILTERAPPLICATIONNAME",
			"value": ""
		},
		{
			"key": "FILTERCLAIMSETNAME",
			"value": ""
		}
	]
}