{
	"info": {
		"_postman_id": "2d1ed547-d825-4b3e-8272-1035d2965100",
		"name": "Admin API E2E 2.0 - Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42411115",
		"_collection_link": "https://dewfdaf.postman.co/workspace/ADMINAPI-1214~5cebf2b8-1c75-4f33-bdf5-c61ddb6ada6d/collection/42411115-2d1ed547-d825-4b3e-8272-1035d2965100?action=share&source=collection_link&creator=42411115"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "Application",
					"item": [
						{
							"name": "Applications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Application Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Application User\",\r",
											"      \"contactEmailAddress\": \"application@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"ApplicationVendorId\", id);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const json = response.json();\r",
											"  if(!json[0].id) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }\r",
											"  else {\r",
											"    pm.collectionVariables.set(\"ODSInstanceId\", json[0].id);\r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"POST Applications: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/applications/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications: Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedApplicationId\", result.id);\r",
											"}\r",
											"\r",
											"const PostApplicationSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"secret\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"secret\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"POST Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PostApplicationSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceIds\": [ {{ODSInstanceId}} ],\r\n  \"enabled\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Applications Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [],\r\n  \"odsInstanceIds\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid Vendor: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Applications Invalid Vendor: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Vendor: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Vendor: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
											"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceIds\": [ {{ODSInstanceId}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid Profile: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST Applications Invalid Profile: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Profile: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Profile: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ProfileIds.length).to.equal(1);\r",
											"    pm.expect(response.errors.ProfileIds[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [ 9999 ],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceIds\": [ {{ODSInstanceId}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid OdsInstance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid ODSInstance: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST Applications Invalid ODSInstance: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid ODSInstance: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid ODSInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.OdsInstanceIds.length).to.equal(1);\r",
											"    pm.expect(response.errors.OdsInstanceIds[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [ ],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceIds\": [ 99999 ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/"
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"    pm.expect(result.enabled).to.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Applications: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"enabled\": {\r",
											"          \"type\": \"boolean\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceIds\",\r",
											"        \"enabled\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Without Offset and Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Applications: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceIds\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/applications"
							},
							"response": []
						},
						{
							"name": "Applications - Without Offset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Applications: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceIds\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications?limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Without Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Applications: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceIds\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications?offset={{offset}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ApplicationID: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ApplicationID: Response result matches application\", function () {\r",
											"    const applicationId = pm.collectionVariables.get(\"CreatedApplicationId\");\r",
											"    pm.expect(result.id).to.equal(applicationId);\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ApplicationID: Response result does not include key or secret\", function () {  \r",
											"    pm.expect(result).to.not.have.property(\"key\");\r",
											"    pm.expect(result).to.not.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"const GetApplicationId = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"applicationName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"claimSetName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"educationOrganizationIds\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"vendorId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"profileIds\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"odsInstanceIds\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"applicationName\",\r",
											"    \"claimSetName\",\r",
											"    \"educationOrganizationIds\",\r",
											"    \"vendorId\",\r",
											"    \"profileIds\",\r",
											"    \"odsInstanceIds\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ApplicationId: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications by Vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Application by Vendor: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Response result is filtered by vendor\", function () {\r",
											"    const resultApplicationIds = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    );\r",
											"\r",
											"    pm.expect(resultApplicationIds).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"    pm.expect(resultApplicationIds).to.not.contain(pm.collectionVariables.get(\"OtherApplicationId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationByVendor = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceIds\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationByVendor);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Other Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Other Application User\",\r",
											"      \"contactEmailAddress\": \"otherapplication@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (vendorErr, vendorResponse) {\r",
											"  if(vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }\r",
											"  const vendorId = vendorResponse.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if (vendorId)\r",
											"  {\r",
											"      pm.collectionVariables.set(\"OtherApplicationVendorId\", vendorId);\r",
											"  }\r",
											"\r",
											"  pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v2/applications`,\r",
											"    method: 'POST',\r",
											"    header: header,\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw:JSON.stringify({\r",
											"        \"applicationName\": \"Other Vendor Application\",\r",
											"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"        \"claimSetName\": \"Ed-Fi Sandbox\",\r",
											"        \"profileIds\": [],\r",
											"        \"educationOrganizationIds\": [ 255901 ],\r",
											"        \"odsInstanceIds\": [pm.collectionVariables.get(\"ODSInstanceId\")],\r",
											"        \"enabled\" : true\r",
											"      }),\r",
											"    }\r",
											"  },  \r",
											"  function (appErr, appResonse) {\r",
											"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"    const id = appResonse.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"      pm.collectionVariables.set(\"OtherApplicationId\", id);\r",
											"    }\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/vendors/{{ApplicationVendorId}}/applications"
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/applications/${pm.collectionVariables.get(\"CreatedApplicationId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (err, response) {\r",
											"  if(err) \r",
											"  { \r",
											"    console.log(\"Error :\", err); \r",
											"  } \r",
											"  const updated = response.json();\r",
											"pm.test(\"PUT Application: Response result includes updated application\", function () {\r",
											"    pm.expect(updated.applicationName).to.equal(\"Updated Application Name\");\r",
											"    pm.expect(updated.claimSetName).to.equal(\"Ed-Fi ODS Admin App\");\r",
											"    pm.expect(updated.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(updated.profileIds.length).to.equal(0);\r",
											"    pm.expect(updated.odsInstanceIds.length).to.equal(1);\r",
											"    pm.expect(updated.enabled).to.equal(false);\r",
											"   });\r",
											"\r",
											"   pm.test(\"PUT Application: Response result does not include application key and secret\", function () {\r",
											"    pm.expect(updated).to.not.have.property(\"key\");\r",
											"    pm.expect(updated).to.not.have.property(\"secret\");\r",
											"    });\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application: Request updated Application/Vendor relationship\", function () {\r",
											"    pm.sendRequest({\r",
											"      url: `${pm.variables.get(\"API_URL\")}/v2/vendors/${pm.collectionVariables.get(\"ApplicationVendorId\")}/applications`,\r",
											"      method: 'GET',\r",
											"      header: header,\r",
											"      body: {\r",
											"        mode: 'raw',\r",
											"        raw:JSON.stringify({\r",
											"          \"company\": \"Application Company\",\r",
											"          \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"          \"contactName\": \"Application User\",\r",
											"          \"contactEmailAddress\": \"application@example.com\"\r",
											"        }), \r",
											"      }\r",
											"  },  \r",
											"  function (err, response) {\r",
											"    if(err) { console.log(\"Error in test request:\", err); }\r",
											"    if(response.code != 200) { console.log('Error in  test request. Response is:', response); }\r",
											"    const results = response.json();\r",
											"    pm.expect(results.length).to.equal(0);\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceIds\": [ {{ODSInstanceId}} ],\r\n  \"enabled\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Application Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [],\r\n  \"odsInstanceIds\": [ ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid Vendor: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Application Invalid Vendor: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Vendor: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Vendor: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
											"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceIds\":  [ {{ODSInstanceId}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid Profile: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT Application Invalid Profile: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Profile: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Profile: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ProfileIds.length).to.equal(1);\r",
											"    pm.expect(response.errors.ProfileIds[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [9999],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceIds\": [ {{ODSInstanceId}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications - Invalid OdsInstance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid OdsInstance: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT Application Invalid OdsInstance: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid OdsInstance: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid OdsInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.OdsInstanceIds.length).to.equal(1);\r",
											"    pm.expect(response.errors.OdsInstanceIds[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceIds\": [ 9999 ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Reset Credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResetCredentials: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResetCredentials: Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"const PutResetCredentialsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"secret\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"secret\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"PUT Reset Credentials: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutResetCredentialsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}/reset-credential"
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE Applications: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE Applications: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteApplicationsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteApplicationsSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Application NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Reset Credential - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Reset Credential NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Reset Credential NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Reset Credential NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}/reset-credential"
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceIds\": [ {{ODSInstanceId}} ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL Application NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Application NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Application NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"ApplicationVendorId\");\r",
											"pm.collectionVariables.unset(\"CreatedApplicationId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{TOKEN}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "OtherApplicationVendorId",
			"value": ""
		},
		{
			"key": "OtherApplicationId",
			"value": ""
		},
		{
			"key": "ApplicationVendorId",
			"value": ""
		},
		{
			"key": "CreatedApplicationId",
			"value": ""
		}
	]
}