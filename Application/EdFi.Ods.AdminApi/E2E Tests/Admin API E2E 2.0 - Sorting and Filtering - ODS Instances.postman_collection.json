{
	"info": {
		"_postman_id": "ee933872-22de-440c-ac3b-b79a8a7fc422",
		"name": "Admin API E2E 2.0 - Sorting and Filtering - ODS Instances",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get ODS Instances order by Default Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = results.sort(function(a, b) {\r",
							"        var a1st = -1; // negative value means left item should appear first\r",
							"        var b1st =  1; // positive value means right item should appear first\r",
							"        var equal = 0; // zero means objects are equal\r",
							"\r",
							"        // compare your object's property values and determine their order\r",
							"        if (b.name < a.name) {\r",
							"            return b1st;\r",
							"        }\r",
							"        else if (a.name < b.name) {\r",
							"            return a1st;\r",
							"        }\r",
							"        else {\r",
							"            return equal;\r",
							"        }\r",
							"    });\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Default Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Namne desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.name.toLowerCase()],['desc']);\r",
							"    var other = sortByProperty(results, 'name', -1);\r",
							"\r",
							"    console.log(\"results\");\r",
							"    console.log(JSON.stringify(expectedSortedOrder));\r",
							"    console.log(\"other\");\r",
							"    console.log(JSON.stringify(other));\r",
							"    console.log(\"expected\");\r",
							"    console.log(JSON.stringify(results));\r",
							"    // sortByProperty(results, 'name', -1);\r",
							"     //_.orderBy(results, [odsInstance => odsInstance.name.toLowerCase()],['desc']);\r",
							"\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Namne desc - ALT\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.name.toLowerCase()],['desc']);\r",
							"    var other = sortByProperty(results, 'name', -1);\r",
							"\r",
							"    // sortByProperty(results, 'name', -1);\r",
							"     //_.orderBy(results, [odsInstance => odsInstance.name.toLowerCase()],['desc']);\r",
							"\r",
							"    pm.expect(results).to.eql(other);\r",
							"});\r",
							"\r",
							"function sortByProperty(objArray, prop, direction){\r",
							"    if (arguments.length<2) throw new Error(\"ARRAY, AND OBJECT PROPERTY MINIMUM ARGUMENTS, OPTIONAL DIRECTION\");\r",
							"    if (!Array.isArray(objArray)) throw new Error(\"FIRST ARGUMENT NOT AN ARRAY\");\r",
							"    const clone = objArray.slice(0);\r",
							"    const direct = arguments.length>2 ? arguments[2] : 1; //Default to ascending\r",
							"    const propPath = (prop.constructor===Array) ? prop : prop.split(\".\");\r",
							"    clone.sort(function(a,b){\r",
							"        for (let p in propPath){\r",
							"                if (a[propPath[p]] && b[propPath[p]]){\r",
							"                    a = a[propPath[p]];\r",
							"                    b = b[propPath[p]];\r",
							"                }\r",
							"        }\r",
							"        // convert numeric strings to integers\r",
							"        a = a.match(/^\\d+$/) ? +a : a;\r",
							"        b = b.match(/^\\d+$/) ? +b : b;\r",
							"        return ( (a < b) ? -1*direct : ((a > b) ? 1*direct : 0) );\r",
							"    });\r",
							"    return clone;\r",
							"}\r",
							"\r",
							"\r",
							"function bIgnoreForPrimarySort (iCharCode)\r",
							"{\r",
							"    /*--- A bunch of characters get ignored for the primary sort weight.\r",
							"        The most important ones are the hyphen and apostrophe characters.\r",
							"        A bunch of control characters and a couple of odds and ends, make up\r",
							"        the rest.\r",
							"    */\r",
							"    if (iCharCode < 9)                                                  return true;\r",
							"\r",
							"    if (iCharCode >= 14   &&  iCharCode <= 31)                          return true;\r",
							"\r",
							"    if (iCharCode >= 127  &&  iCharCode <= 159)                         return true;\r",
							"\r",
							"    if (iCharCode == 39   ||  iCharCode == 45  ||  iCharCode == 173)    return true;\r",
							"\r",
							"    return false;\r",
							"}\r",
							"\r",
							"\r",
							"function SortByRoughSQL_Latin1_General_CP1_CS_AS (sA, sB)\r",
							"{\r",
							"    /*--- This Sorts Latin1 and extended Latin1 unicode with an approximation\r",
							"        of SQL's SQL_Latin1_General_CP1_CS_AS collation.\r",
							"        Certain modifying characters or contractions my be off (not tested), we trade-off\r",
							"        perfect accuracy for speed and relative simplicity.\r",
							"\r",
							"        True unicode sorting is devilishly complex and we're not getting paid enough to\r",
							"        fully implement it in Javascript.  ;-)\r",
							"\r",
							"        It looks like a definative sort would require painstaking exegesis of documents\r",
							"        such as: http://unicode.org/reports/tr10/\r",
							"    */\r",
							"    //--- This is the master lookup table for Latin1 code-points.  Here through the extended set \\u02AF\r",
							"    //--- Make this static?\r",
							"    var aSortOrder  = [\r",
							"                     -1,  151,  152,  153,  154,  155,  156,  157,  158,    2,    3,    4,    5,    6,  159,  160,  161,  162,  163,  164,\r",
							"                    165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,    0,    7,    8,    9,   10,   11,   12,  210,\r",
							"                     13,   14,   15,   41,   16,  211,   17,   18,   65,   69,   71,   74,   76,   77,   80,   81,   82,   83,   19,   20,\r",
							"                     42,   43,   44,   21,   22,  214,  257,  266,  284,  308,  347,  352,  376,  387,  419,  427,  438,  459,  466,  486,\r",
							"                    529,  534,  538,  559,  576,  595,  636,  641,  647,  650,  661,   23,   24,   25,   26,   27,   28,  213,  255,  265,\r",
							"                    283,  307,  346,  350,  374,  385,  418,  426,  436,  458,  464,  485,  528,  533,  536,  558,  575,  594,  635,  640,\r",
							"                    646,  648,  660,   29,   30,   31,   32,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,\r",
							"                    190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,\r",
							"                      1,   33,   53,   54,   55,   56,   34,   57,   35,   58,  215,   46,   59,  212,   60,   36,   61,   45,   72,   75,\r",
							"                     37,   62,   63,   64,   38,   70,  487,   47,   66,   67,   68,   39,  219,  217,  221,  231,  223,  233,  250,  276,\r",
							"                    312,  310,  316,  318,  392,  390,  395,  397,  295,  472,  491,  489,  493,  503,  495,   48,  511,  599,  597,  601,\r",
							"                    603,  652,  590,  573,  218,  216,  220,  230,  222,  232,  249,  275,  311,  309,  315,  317,  391,  389,  394,  396,\r",
							"                    294,  471,  490,  488,  492,  502,  494,   49,  510,  598,  596,  600,  602,  651,  589,  655,  229,  228,  227,  226,\r",
							"                    235,  234,  268,  267,  272,  271,  270,  269,  274,  273,  286,  285,  290,  287,  324,  323,  322,  321,  314,  313,\r",
							"                    326,  325,  320,  319,  358,  357,  362,  361,  356,  355,  364,  363,  378,  377,  380,  379,  405,  404,  403,  402,\r",
							"                    401,  400,  407,  406,  393,  388,  417,  416,  421,  420,  432,  431,  428,  440,  439,  447,  446,  444,  443,  442,\r",
							"                    441,  450,  449,  468,  467,  474,  473,  470,  469,  477,  484,  483,  501,  500,  499,  498,  507,  506,  527,  526,\r",
							"                    540,  539,  544,  543,  542,  541,  561,  560,  563,  562,  567,  566,  565,  564,  580,  579,  578,  577,  593,  592,\r",
							"                    611,  610,  609,  608,  607,  606,  613,  612,  617,  616,  615,  614,  643,  642,  654,  653,  656,  663,  662,  665,\r",
							"                    664,  667,  666,  574,  258,  260,  262,  261,  264,  263,  281,  278,  277,  304,  292,  289,  288,  297,  335,  337,\r",
							"                    332,  348,  349,  369,  371,  382,  415,  409,  434,  433,  448,  451,  462,  476,  479,  509,  521,  520,  524,  523,\r",
							"                    531,  530,  552,  572,  571,  569,  570,  583,  582,  581,  585,  632,  631,  634,  638,  658,  657,  669,  668,  673,\r",
							"                    677,  676,  678,   73,   79,   78,  680,  644,   50,   51,   52,   40,  303,  302,  301,  457,  456,  455,  482,  481,\r",
							"                    480,  225,  224,  399,  398,  497,  496,  605,  604,  626,  625,  620,  619,  624,  623,  622,  621,  334,  241,  240,\r",
							"                    237,  236,  254,  253,  366,  365,  360,  359,  430,  429,  505,  504,  515,  514,  675,  674,  422,  300,  299,  298,\r",
							"                    354,  353,   84,   85,   86,   87,  239,  238,  252,  251,  513,  512,  243,  242,  245,  244,  328,  327,  330,  329,\r",
							"                    411,  410,  413,  412,  517,  516,  519,  518,  547,  546,  549,  548,  628,  627,  630,  629,   88,   89,   90,   91,\r",
							"                     92,   93,   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,\r",
							"                    112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,\r",
							"                    132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  246,  247,  248,  259,  279,  280,  293,  291,\r",
							"                    339,  336,  338,  331,  340,  341,  342,  423,  367,  373,  351,  370,  372,  383,  381,  384,  408,  414,  386,  445,\r",
							"                    453,  452,  454,  461,  463,  460,  475,  478,  465,  508,  522,  525,  532,  550,  553,  554,  555,  545,  556,  557,\r",
							"                    537,  551,  568,  333,  424,  343,  344,  586,  584,  618,  633,  637,  639,  645,  659,  649,  670,  671,  672,  679,\r",
							"                    681,  682,  683,  282,  686,  256,  345,  368,  375,  425,  435,  437,  535,  684,  685,  305,  296,  306,  591,  587,\r",
							"                    588,  144,  145,  146,  147,  148,  149,  150\r",
							"                    ];\r",
							"\r",
							"    var iLenA           = sA.length,    iLenB           = sB.length;\r",
							"    var jA              = 0,            jB              = 0;\r",
							"    var sIgnoreBuff_A   = [],           sIgnoreBuff_B   = [];\r",
							"\r",
							"\r",
							"    function iSortIgnoreBuff ()\r",
							"    {\r",
							"        var iIgLenA = sIgnoreBuff_A.length, iIgLenB = sIgnoreBuff_B.length;\r",
							"        var kA      = 0,                    kB      = 0;\r",
							"\r",
							"        while (kA < iIgLenA  &&  kB < iIgLenB)\r",
							"        {\r",
							"            var igA = sIgnoreBuff_A [kA++],  igB = sIgnoreBuff_B [kB++];\r",
							"\r",
							"            if (aSortOrder[igA]  >  aSortOrder[igB] )   return 1;\r",
							"            if (aSortOrder[igA]  <  aSortOrder[igB] )   return -1;\r",
							"        }\r",
							"        //--- All else equal, longest string loses\r",
							"        if (iIgLenA > iIgLenB)      return 1;\r",
							"        if (iIgLenA < iIgLenB)      return -1;\r",
							"\r",
							"        return 0;\r",
							"    }\r",
							"\r",
							"\r",
							"    while (jA < iLenA  &&  jB < iLenB)\r",
							"    {\r",
							"        var cA  = sA.charCodeAt (jA++);\r",
							"        var cB  = sB.charCodeAt (jB++);\r",
							"\r",
							"        if (cA == cB)\r",
							"        {\r",
							"            continue;\r",
							"        }\r",
							"\r",
							"        while (bIgnoreForPrimarySort (cA) )\r",
							"        {\r",
							"            sIgnoreBuff_A.push (cA);\r",
							"            if (jA < iLenA)\r",
							"                cA  = sA.charCodeAt (jA++);\r",
							"            else\r",
							"                break;\r",
							"        }\r",
							"        while (bIgnoreForPrimarySort (cB) )\r",
							"        {\r",
							"            sIgnoreBuff_B.push (cB);\r",
							"            if (jB < iLenB)\r",
							"                cB  = sB.charCodeAt (jB++);\r",
							"            else\r",
							"                break;\r",
							"        }\r",
							"\r",
							"        /*--- Have we reached the end of one or both strings, ending on an ignore char?\r",
							"            The strings were equal, up to that point.\r",
							"            If one of the strings is NOT an ignore char, while the other is, it wins.\r",
							"        */\r",
							"        if (bIgnoreForPrimarySort (cA) )\r",
							"        {\r",
							"            if (! bIgnoreForPrimarySort (cB))   return -1;\r",
							"        }\r",
							"        else if (bIgnoreForPrimarySort (cB) )\r",
							"        {\r",
							"            return 1;\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            if (aSortOrder[cA]  >  aSortOrder[cB] )\r",
							"                return 1;\r",
							"\r",
							"            if (aSortOrder[cA]  <  aSortOrder[cB] )\r",
							"                return -1;\r",
							"\r",
							"            //--- We are equal, so far, on the main chars.  Where there ignore chars?\r",
							"            var iBuffSort   = iSortIgnoreBuff ();\r",
							"            if (iBuffSort)  return iBuffSort;\r",
							"\r",
							"            //--- Still here?  Reset the ignore arrays.\r",
							"            sIgnoreBuff_A   = [];\r",
							"            sIgnoreBuff_B   = [];\r",
							"        }\r",
							"\r",
							"    } //-- while (jA < iLenA  &&  jB < iLenB)\r",
							"\r",
							"    /*--- We have gone through all of at least one string and they are still both\r",
							"        equal barring ignore chars or unequal lengths.\r",
							"    */\r",
							"    var iBuffSort   = iSortIgnoreBuff ();\r",
							"    if (iBuffSort)  return iBuffSort;\r",
							"\r",
							"    //--- All else equal, longest string loses\r",
							"    if (iLenA > iLenB)      return 1;\r",
							"    if (iLenA < iLenB)      return -1;\r",
							"\r",
							"    return 0;\r",
							"\r",
							"} //-- function SortByRoughSQL_Latin1_General_CP1_CS_AS\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Id Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Id asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.id],['asc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=id&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "id"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Id Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Id desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.id],['desc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=id&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "id"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Name Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = results.sort(function(a, b) {\r",
							"        var a1st = -1; // negative value means left item should appear first\r",
							"        var b1st =  1; // positive value means right item should appear first\r",
							"        var equal = 0; // zero means objects are equal\r",
							"\r",
							"        // compare your object's property values and determine their order\r",
							"        if (b.name < a.name) {\r",
							"            return b1st;\r",
							"        }\r",
							"        else if (a.name < b.name) {\r",
							"            return a1st;\r",
							"        }\r",
							"        else {\r",
							"            return equal;\r",
							"        }\r",
							"    });\r",
							"\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=name&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "name"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Name Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Name desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = results.sort(function(a, b) {\r",
							"        var a1st = -1; // negative value means left item should appear first\r",
							"        var b1st =  1; // positive value means right item should appear first\r",
							"        var equal = 0; // zero means objects are equal\r",
							"\r",
							"        // compare your object's property values and determine their order\r",
							"        if (b.name < a.name) {\r",
							"            return b1st;\r",
							"        }\r",
							"        else if (a.name < b.name) {\r",
							"            return a1st;\r",
							"        }\r",
							"        else {\r",
							"            return equal;\r",
							"        }\r",
							"    }).reverse();\r",
							"\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=Name&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "Name"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by InstanceType Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by InstanceType asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    // var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.instanceType ? odsInstance.instanceType.toLowerCase() : null],['asc']);\r",
							"    var expectedSortedOrder = results.sort(function(a, b) {\r",
							"        var a1st = -1; // negative value means left item should appear first\r",
							"        var b1st =  1; // positive value means right item should appear first\r",
							"        var equal = 0; // zero means objects are equal\r",
							"\r",
							"        // compare your object's property values and determine their order\r",
							"        if (b.instanceType < a.instanceType) {\r",
							"            return b1st;\r",
							"        }\r",
							"        else if (a.instanceType < b.instanceType) {\r",
							"            return a1st;\r",
							"        }\r",
							"        else {\r",
							"            return equal;\r",
							"        }\r",
							"    });\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=instanceType&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "instanceType"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by InstanceType Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by InstanceType desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    // var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.instanceType ? odsInstance.instanceType.toLowerCase() : null],['desc']);\r",
							"    var expectedSortedOrder = results.sort(function(a, b) {\r",
							"        var a1st = -1; // negative value means left item should appear first\r",
							"        var b1st =  1; // positive value means right item should appear first\r",
							"        var equal = 0; // zero means objects are equal\r",
							"\r",
							"        // compare your object's property values and determine their order\r",
							"        if (b.instanceType < a.instanceType) {\r",
							"            return b1st;\r",
							"        }\r",
							"        else if (a.instanceType < b.instanceType) {\r",
							"            return a1st;\r",
							"        }\r",
							"        else {\r",
							"            return equal;\r",
							"        }\r",
							"    }).reverse();\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=instanceType&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "instanceType"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances filter by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Ods Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result includes Ods instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result contains requested Ods instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].name).to.eql(pm.collectionVariables.get(\"FILTERNAME\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&name={{FILTERNAME}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "name",
							"value": "{{FILTERNAME}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances filter by InstanceType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Ods Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result includes Ods Instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result contains requested Ods Instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].instanceType).to.eql(pm.collectionVariables.get(\"FILTERINSTANCETYPE\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&instanceType={{FILTERINSTANCETYPE}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "instanceType",
							"value": "{{FILTERINSTANCETYPE}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/// -------",
					"/// Authentication",
					"/// -------",
					"",
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"function generateAlphanumericString() {",
					"    const minLength = 8;",
					"    const maxLength = 24;",
					"    let result = '';",
					"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
					"    // const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    // result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"/// -------",
					"/// ODS Instances",
					"/// -------",
					"const createODSInstance = (name, instanceType) => new Promise((resolve) => {",
					"    pm.sendRequest({",
					"        url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances`,",
					"        method: 'POST',",
					"        header: header,",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ \"name\": `${name}`, \"instanceType\": `${instanceType}`, \"connectionString\": pm.variables.get(\"connectionString\") })",
					"        }",
					"    }, (err, res) => {",
					"        let location = res.headers.get('Location');",
					"        let matches = location.match(/(\\d+)/);",
					"        let odsInstanceId = parseInt(matches[0], 10);",
					"        resolve(odsInstanceId);",
					"    });",
					"});",
					"",
					"var guid = pm.variables.replaceIn('{{$guid}}');",
					"var client_secret =  generateClientSecret();",
					"var header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"const registerRequest = {",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"            ]",
					"    }",
					"}",
					"",
					"const tokenRequest = {",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"}",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest(registerRequest,",
					"    (err, res) => {",
					"        let error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"        pm.sendRequest(tokenRequest,",
					"            (err, res) => {",
					"                let error = res.json().error",
					"                if(error) {",
					"                    throw res.json().error_description",
					"                }",
					"                pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"",
					"                header = {",
					"                    'Content-Type': 'application/json',",
					"                    'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`",
					"                };",
					"            ",
					"                if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"                    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"                    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"                }",
					"                let totalToCreate = parseInt(pm.collectionVariables.get(\"ODSINSTANCECOUNT\"), 10);",
					"                let odsInstancesToDelete = [];",
					"                for (let i = 0; i < totalToCreate; i++) {",
					"                    let name =  `TestOdsInstance${generateAlphanumericString()}`;",
					"                    let instanceType =  generateAlphanumericString();",
					"            ",
					"                    pm.collectionVariables.set(\"FILTERNAME\", name);",
					"                    pm.collectionVariables.set(\"FILTERINSTANCETYPE\", instanceType);",
					"                    ",
					"                    pm.sendRequest({",
					"                        url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances`,",
					"                        method: 'POST',",
					"                        header: header,",
					"                        body: {",
					"                            mode: 'raw',",
					"                            raw: JSON.stringify({ \"name\": `${name}`, \"instanceType\": `${instanceType}`, \"connectionString\": pm.variables.get(\"connectionString\") })",
					"                        }",
					"                    }, (err, res) => {",
					"                        let location = res.headers.get('Location');",
					"                        let matches = location.match(/(\\d+)/);",
					"                        let odsInstanceId = parseInt(matches[0], 10);",
					"                        // odsInstancesToDelete.push({id: odsInstanceId, name: name, instanceType: instanceType});",
					"                        odsInstancesToDelete.push(odsInstanceId);",
					"                    });",
					"                }",
					"                pm.collectionVariables.set(\"ODSINSTANCESTODELETE\", JSON.stringify(odsInstancesToDelete));",
					"        });",
					"});",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"header = {",
					"    'Content-Type': 'application/json',",
					"    'Accept': '*/*',",
					"    'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"function deleteODSInstanceById(id) {",
					"        pm.sendRequest({",
					"            url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances/${id}`,",
					"            method: 'DELETE',",
					"            header: header",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.log(\"Error deleting: \" + err);",
					"            }",
					"        });",
					"}",
					"",
					"function deleteODSInstances() {",
					"    if (!pm.variables.get(\"ODSINSTANCESTODELETE\"))",
					"    {",
					"        let odsInstancesToDelete = JSON.parse(pm.variables.get(\"ODSINSTANCESTODELETE\"));",
					"",
					"        for (let i = 0; i < odsInstancesToDelete.length; i++) {",
					"            deleteODSInstanceById(odsInstancesToDelete[i]);",
					"        }",
					"    }",
					"}",
					"",
					"deleteODSInstances();"
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILTERNAME",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILTERINSTANCETYPE",
			"value": "",
			"type": "string"
		},
		{
			"key": "ODSINSTANCECOUNT",
			"value": "5",
			"type": "string"
		},
		{
			"key": "ODSINSTANCESTODELETE",
			"value": "",
			"type": "string"
		}
	]
}