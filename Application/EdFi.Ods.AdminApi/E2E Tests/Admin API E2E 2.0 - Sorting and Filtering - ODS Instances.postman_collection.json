{
	"info": {
		"_postman_id": "be57956c-6278-4137-8514-55c0d27a5f3e",
		"name": "Admin API E2E 2.0 - Sorting and Filtering - ODS Instances",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37902114"
	},
	"item": [
		{
			"name": "Get ODS Instances order by Default Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [dt => dt.name],['asc'])    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Default Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Namne desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.name],['desc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Id Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Id asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.id],['asc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=id&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "id"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Id Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Id desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.id],['desc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=id&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "id"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Name Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.name],['asc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=name&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "name"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by Name Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by Name desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.name],['desc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=Name&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "Name"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by InstanceType Asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by InstanceType asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.instanceType ? odsInstance.instanceType : null],['asc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=instanceType&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "instanceType"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances order by InstanceType Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET ODS Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result includes ODS Instances\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET ODS Instances: Response result is ordered by InstanceType desc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [odsInstance => odsInstance.instanceType ? odsInstance.instanceType : null],['desc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&orderBy=instanceType&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "instanceType"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances filter by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Ods Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result includes Ods instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result contains requested Ods instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].name).to.eql(pm.collectionVariables.get(\"FILTERNAME\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&name={{FILTERNAME}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "name",
							"value": "{{FILTERNAME}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get ODS Instances filter by InstanceType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Ods Instances: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result includes Ods Instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Ods Instances: Response result contains requested Ods Instance\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].instanceType).to.eql(pm.collectionVariables.get(\"FILTERINSTANCETYPE\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}&instanceType={{FILTERINSTANCETYPE}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"odsInstances"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "instanceType",
							"value": "{{FILTERINSTANCETYPE}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/// -------",
					"/// Authentication",
					"/// -------",
					"",
					"const jsHelperVar = pm.variables.get('jsHelper');",
					"const jsHelper = eval(jsHelperVar);",
					"",
					"var header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"var guid = pm.variables.replaceIn('{{$guid}}');",
					"var client_secret =  jsHelper().generateClientSecret();",
					"",
					" const registerRequest = {",
					"     url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"     method: 'POST',",
					"     header: header,",
					"     body: {",
					"         mode: 'urlencoded',",
					"         urlencoded: [",
					"             {key: 'ClientId', value: guid },",
					"             {key: 'ClientSecret', value: client_secret },",
					"             {key: 'DisplayName', value: guid }",
					"             ]",
					"     }",
					" }",
					"",
					" const tokenRequest = {",
					"     url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"     method: 'POST',",
					"     header: header,",
					"     body: {",
					"         mode: 'urlencoded',",
					"         urlencoded: [",
					"             {key: 'client_id', value: guid },",
					"             {key: 'client_secret', value: client_secret },",
					"             {key: 'grant_type', value: \"client_credentials\"},",
					"             {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"         ]",
					"     }",
					" }",
					"",
					" if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"     header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"     pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					" }",
					"",
					"function generateAlphanumericString() {",
					"    const minLength = 8;",
					"    const maxLength = 24;",
					"    let result = '';",
					"    //const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += jsHelper().randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += jsHelper().randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += jsHelper().randomChar('0123456789');",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
					"    }",
					"",
					"    return jsHelper().shuffleString(result);",
					"}",
					"",
					"/// -------",
					"/// ODS Instances",
					"/// -------",
					"",
					"pm.sendRequest(registerRequest,",
					"    (err, res) => {",
					"        let error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"        pm.sendRequest(tokenRequest,",
					"            (err, res) => {",
					"                let error = res.json().error",
					"                if(error) {",
					"                    throw res.json().error_description",
					"                }",
					"                pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"",
					"                header = {",
					"                    'Content-Type': 'application/json',",
					"                    'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`",
					"                };",
					"            ",
					"                if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"                    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"                    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"                }",
					"                let totalToCreate = parseInt(pm.collectionVariables.get(\"ODSINSTANCECOUNT\"), 10);",
					"                var odsInstancesToDelete = [];",
					"                for (let i = 0; i < totalToCreate; i++) {",
					"                    let name =  `TestOdsInstance-${generateAlphanumericString()}`;",
					"                    let instanceType =  generateAlphanumericString();",
					"            ",
					"                    pm.collectionVariables.set(\"FILTERNAME\", name);",
					"                    pm.collectionVariables.set(\"FILTERINSTANCETYPE\", instanceType);",
					"                    ",
					"                    pm.sendRequest({",
					"                        url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances`,",
					"                        method: 'POST',",
					"                        header: header,",
					"                        body: {",
					"                            mode: 'raw',",
					"                            raw: JSON.stringify({ \"name\": `${name}`, \"instanceType\": `${instanceType}`, \"connectionString\": pm.variables.get(\"connectionString\") })",
					"                        }",
					"                    }, (err, res) => {",
					"                        let location = res.headers.get('Location');",
					"                        let matches = location.match(/(\\d+)/);",
					"                        let odsInstanceId = parseInt(matches[0], 10);",
					"                        // odsInstancesToDelete.push({id: odsInstanceId, name: name, instanceType: instanceType});",
					"                        odsInstancesToDelete.push(odsInstanceId);",
					"                    });",
					"                }",
					"                pm.collectionVariables.set(\"ODSINSTANCESTODELETE\", odsInstancesToDelete);",
					"        });",
					"});",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"header = {",
					"    'Content-Type': 'application/json',",
					"    'Accept': '*/*',",
					"    'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"function deleteODSInstanceById(id) {",
					"        pm.sendRequest({",
					"            url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances/${id}`,",
					"            method: 'DELETE',",
					"            header: header",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.log(\"Error deleting: \" + err);",
					"            }",
					"        });",
					"}",
					"",
					"function deleteODSInstances() {",
					"    ",
					"    let odsInstancesToDelete = pm.collectionVariables.get(\"ODSINSTANCESTODELETE\").split(\",\");",
					"",
					"    for (let i = 0; i < odsInstancesToDelete.length; i++) {",
					"        deleteODSInstanceById(odsInstancesToDelete[i]);",
					"    }",
					"    ",
					"}",
					"",
					"deleteODSInstances();"
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILTERNAME",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILTERINSTANCETYPE",
			"value": "",
			"type": "string"
		},
		{
			"key": "ODSINSTANCECOUNT",
			"value": "5",
			"type": "string"
		},
		{
			"key": "ODSINSTANCESTODELETE",
			"value": "",
			"type": "string"
		}
	]
}