{
	"info": {
		"_postman_id": "e2786e24-07c1-457f-8a18-718ab118ccf4",
		"name": "Admin API E2E 2.0 - Sorting and Filtering - Claimset",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37902114"
	},
	"item": [
		{
			"name": "Get Claimsets order by Default ASC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimsets\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [claimset => claimset.name],['asc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Claimsets order by Default Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimsets\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [claimset => claimset.name],['desc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Claimsets order by Id ASC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimsets\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result is ordered by Id asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [claimset => claimset.id],['asc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&orderBy=Id&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "Id"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Claimsets order by Id Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimsets\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result is ordered by Id asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [claimset => claimset.id],['desc']);\r",
							"    \r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&orderBy=Id&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "Id"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Claimsets order by Name ASC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimsets\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    var expectedSortedOrder = _.orderBy(results, [claimset => claimset.name],['asc']);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&orderBy=name&direction=ASC",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "name"
						},
						{
							"key": "direction",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Claimsets order by Name Desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _ = require('lodash');\r",
							"\r",
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimsets\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results.length).to.be.greaterThan(0);   \r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result is ordered by Name asc\", function () {\r",
							"    const results = pm.response.json();\r",
							"    // var expectedSortedOrder = _.orderBy(results, [claimset => claimset.name.toLowerCase()],['desc']);\r",
							"    const strSortByProperty = pm.variables.get('sortByProperty');\r",
							"    eval(strSortByProperty);\r",
							"    let expectedSortedOrder = sortByProperty(results, 'name', -1);\r",
							"    pm.expect(results).to.eql(expectedSortedOrder);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&orderBy=Name&direction=desc",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "orderBy",
							"value": "Name"
						},
						{
							"key": "direction",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Claimsets filter by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET Claimsets: Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result includes claimset\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"GET Claimsets: Response result contains requested claimset\", function () {\r",
							"    const results = pm.response.json();\r",
							"    pm.expect(results[0].name).to.eql(pm.collectionVariables.get(\"FILTERNAME\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}&name={{FILTERNAME}}",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"v2",
						"claimSets"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{offset}}"
						},
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "name",
							"value": "{{FILTERNAME}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/// -------\r",
					"/// Authentication\r",
					"/// -------\r",
					"const jsHelperVar = pm.variables.get('jsHelper');\r",
					"const jsHelper = eval(jsHelperVar);\r",
					"\r",
					"var header = {\r",
					"    'Content-Type': 'application/x-www-form-urlencoded'\r",
					"};\r",
					"\r",
					"var guid = pm.variables.replaceIn('{{$guid}}');\r",
					"var client_secret =  jsHelper().generateClientSecret();\r",
					"\r",
					" const registerRequest = {\r",
					"     url: `${pm.variables.get(\"API_URL\")}/connect/register`,\r",
					"     method: 'POST',\r",
					"     header: header,\r",
					"     body: {\r",
					"         mode: 'urlencoded',\r",
					"         urlencoded: [\r",
					"             {key: 'ClientId', value: guid },\r",
					"             {key: 'ClientSecret', value: client_secret },\r",
					"             {key: 'DisplayName', value: guid }\r",
					"             ]\r",
					"     }\r",
					" }\r",
					"\r",
					" const tokenRequest = {\r",
					"     url: `${pm.variables.get(\"API_URL\")}/connect/token`,\r",
					"     method: 'POST',\r",
					"     header: header,\r",
					"     body: {\r",
					"         mode: 'urlencoded',\r",
					"         urlencoded: [\r",
					"             {key: 'client_id', value: guid },\r",
					"             {key: 'client_secret', value: client_secret },\r",
					"             {key: 'grant_type', value: \"client_credentials\"},\r",
					"             {key: 'scope', value: \"edfi_admin_api/full_access\"}\r",
					"         ]\r",
					"     }\r",
					" }\r",
					"\r",
					" if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
					"     header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
					"     pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
					" }\r",
					"\r",
					"/// -------\r",
					"/// Claimsets\r",
					"/// -------\r",
					"\r",
					"function generateAlphanumericString() {\r",
					"    const minLength = 8;\r",
					"    const maxLength = 24;\r",
					"    let result = '';\r",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
					"\r",
					"    result += jsHelper().randomChar('abcdefghijklmnopqrstuvwxyz');\r",
					"    result += jsHelper().randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r",
					"    result += jsHelper().randomChar('0123456789');\r",
					"\r",
					"    for (let i = result.length; i < length; i++) {\r",
					"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
					"    }\r",
					"\r",
					"    return jsHelper().shuffleString(result);\r",
					"}\r",
					"\r",
					"pm.sendRequest(registerRequest,\r",
					"     (err, res) => {\r",
					"         let error = res.json().error\r",
					"         if(error) {\r",
					"             throw res.json().error_description\r",
					"         }\r",
					"\r",
					"         pm.sendRequest(tokenRequest,\r",
					"             (err, res) => {\r",
					"                 let error = res.json().error\r",
					"                 if(error) {\r",
					"                     throw res.json().error_description\r",
					"                 }\r",
					"                 pm.collectionVariables.set(\"TOKEN\", res.json().access_token)\r",
					"\r",
					"                 header = {\r",
					"                     'Content-Type': 'application/json',\r",
					"                     'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
					"                 };\r",
					"            \r",
					"                 if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
					"                     header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
					"                     pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
					"                 }\r",
					"                 let totalToCreate = parseInt(pm.collectionVariables.get(\"CLAIMSETCOUNT\"), 10);\r",
					"                 var claimsetsToDelete = [];\r",
					"                 for (let i = 0; i < totalToCreate; i++) {\r",
					"                     let name =  generateAlphanumericString();\r",
					"                     pm.collectionVariables.set(\"FILTERNAME\", name);\r",
					"                     pm.sendRequest({\r",
					"                         url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
					"                         method: 'POST',\r",
					"                         header: header,\r",
					"                         body: {\r",
					"                             mode: 'raw',\r",
					"                             raw: JSON.stringify({ \"name\": `${name}` })\r",
					"\r",
					"                         }\r",
					"                     }, (err, res) => {\r",
					"                         let location = res.headers.get('Location');\r",
					"                         let matches = location.match(/(\\d+)/);\r",
					"                         id = parseInt(matches[0], 10);\r",
					"                         claimsetsToDelete.push(id)\r",
					"                     });\r",
					"                 }\r",
					"                 pm.collectionVariables.set(\"CLAIMSETSTODELETE\", claimsetsToDelete);\r",
					"         });\r",
					" });\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var header = {\r",
					"     'Content-Type': 'application/json',\r",
					"     'Accept': '*/*',\r",
					"     'Authorization': `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
					" };\r",
					" if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
					"     header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
					"     pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
					" }\r",
					" function deleteClaimsetById(id) {\r",
					"         pm.sendRequest({\r",
					"             url: `${pm.variables.get(\"API_URL\")}/v2/claimSets/${id}`,\r",
					"             method: 'DELETE',\r",
					"             header: header\r",
					"         }, function (err, res) {\r",
					"             if (err) {\r",
					"                 console.log(err);\r",
					"             }\r",
					"         });\r",
					" }\r",
					" function deleteClaimsets() {\r",
					"     let claimsetsToDelete = pm.collectionVariables.get(\"CLAIMSETSTODELETE\").split(\",\");\r",
					"     for (let i = 0; i < claimsetsToDelete.length; i++) {\r",
					"         deleteClaimsetById(claimsetsToDelete[i]);\r",
					"     }\r",
					" }\r",
					" deleteClaimsets();\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "FILTERNAME",
			"value": "",
			"type": "string"
		},
		{
			"key": "CLAIMSETCOUNT",
			"value": "4",
			"type": "string"
		},
		{
			"key": "CLAIMSETSTODELETE",
			"value": "",
			"type": "string"
		}
	]
}