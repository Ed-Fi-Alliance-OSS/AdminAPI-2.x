{
	"info": {
		"_postman_id": "525e4f04-4454-4e5a-ae3c-2e8e61446cc4",
		"name": "Admin API E2E 2.0 - Multitenant Isolation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26382147"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "OdsInstances",
					"item": [
						{
							"name": "OdsInstances - Tenant1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OdsInstanceGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    pm.test(\"POST OdsInstances: Status code is Created\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    pm.test(\"POST OdsInstances: Response includes location in header\", function () {\r",
											"        pm.response.to.have.header(\"Location\");\r",
											"        const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"        if(id)\r",
											"        {\r",
											"            pm.collectionVariables.set(\"CreatedOdsInstanceId\", id);\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Tenant",
										"value": "Tenant1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test-OdsInstance-{{OdsInstanceGUID}}\",\r\n    \"instanceType\": \"postgresql\",\r\n    \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID - Tenant1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"GET OdsInstancesID: Status code is OK\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"GET OdsInstancesID: Response matches success format\", function () {",
											"        pm.expect(response).to.have.property(\"id\");",
											"        pm.expect(response).to.have.property(\"name\");",
											"        pm.expect(response).to.have.property(\"instanceType\");",
											"        pm.expect(response).to.have.property(\"odsInstanceContexts\");",
											"        pm.expect(response).to.have.property(\"odsInstanceDerivatives\");",
											"    });",
											"",
											"    const GetOdsInstancesIdSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"        \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"        \"type\": \"string\"",
											"        },",
											"        \"instanceType\": {",
											"        \"type\": \"string\"",
											"        },",
											"        \"odsInstanceContexts\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        },",
											"        \"odsInstanceDerivatives\": {",
											"            \"type\": \"array\",",
											"            \"items\": {}",
											"        }",
											"    },",
											"    \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"instanceType\",",
											"        \"odsInstanceContexts\",",
											"        \"odsInstanceDerivatives\"",
											"    ]",
											"    }",
											"",
											"    pm.test(\"GET OdsInstancesID: Validation Schema Response\", () => {",
											"        pm.response.to.have.jsonSchema(GetOdsInstancesIdSchema);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Tenant",
										"value": "Tenant1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID - Tenant2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"GET OdsInstances NotFound: Status code is Not Found\", function () {",
											"        pm.response.to.have.status(404);",
											"    });",
											"",
											"    pm.test(\"GET OdsInstances NotFound: Response matches error format\", function () {",
											"        const response = pm.response.json();",
											"",
											"        pm.expect(response).to.have.property(\"title\");",
											"    });",
											"",
											"    pm.test(\"GET OdsInstances NotFound: Response title is helpful and accurate\", function () {",
											"        const response = pm.response.json();",
											"",
											"        pm.expect(response.title).to.contain(\"Not found\");",
											"        pm.expect(response.title).to.contain(\"odsInstance\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    function generateClientSecret() {\r",
											"        const minLength = 32;\r",
											"        const maxLength = 128;\r",
											"        let result = '';\r",
											"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"        const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';\r",
											"        const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
											"\r",
											"        result += randomChar('abcdefghijklmnopqrstuvwxyz');\r",
											"        result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r",
											"        result += randomChar('0123456789');\r",
											"        result += randomChar(specialCharacters);\r",
											"\r",
											"        for (let i = result.length; i < length; i++) {\r",
											"            const charactersPlusSpecial = characters + specialCharacters;\r",
											"            result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));\r",
											"        }\r",
											"\r",
											"        return shuffleString(result);\r",
											"    }\r",
											"\r",
											"    function randomChar(str) {\r",
											"        return str.charAt(Math.floor(Math.random() * str.length));\r",
											"    }\r",
											"\r",
											"    function shuffleString(str) {\r",
											"        const array = str.split('');\r",
											"        for (let i = array.length - 1; i > 0; i--) {\r",
											"            const j = Math.floor(Math.random() * (i + 1));\r",
											"            [array[i], array[j]] = [array[j], array[i]];\r",
											"        }\r",
											"        return array.join('');\r",
											"    }\r",
											"\r",
											"    let guid = pm.variables.replaceIn('{{$guid}}');\r",
											"    let client_secret =  generateClientSecret();\r",
											"\r",
											"    let header = {\r",
											"        'Content-Type': 'application/x-www-form-urlencoded'\r",
											"    };\r",
											"\r",
											"    if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"        header['Tenant'] = `${pm.variables.get(\"tenant2\")}`;\r",
											"        pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant2\")}` });\r",
											"    }\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${pm.variables.get(\"API_URL\")}/connect/register`,\r",
											"        method: 'POST',\r",
											"        header: header,\r",
											"        body: {\r",
											"            mode: 'urlencoded',\r",
											"            urlencoded: [\r",
											"                {key: 'ClientId', value: guid },\r",
											"                {key: 'ClientSecret', value: client_secret },\r",
											"                {key: 'DisplayName', value: guid }\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"        (err, res) => {\r",
											"            error = res.json().error\r",
											"            if(error) {\r",
											"                throw res.json().error_description\r",
											"            }\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `${pm.variables.get(\"API_URL\")}/connect/token`,\r",
											"        method: 'POST',\r",
											"        header: header,\r",
											"        body: {\r",
											"            mode: 'urlencoded',\r",
											"            urlencoded: [\r",
											"                {key: 'client_id', value: guid },\r",
											"                {key: 'client_secret', value: client_secret },\r",
											"                {key: 'grant_type', value: \"client_credentials\"},\r",
											"                {key: 'scope', value: \"edfi_admin_api/full_access\"}\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"        (err, res) => {\r",
											"            error = res.json().error\r",
											"            if(error) {\r",
											"                throw res.json().error_description\r",
											"            }\r",
											"            pm.collectionVariables.set(\"TOKEN_TENANT2\", res.json().access_token)\r",
											"    });\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKEN_TENANT2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Tenant",
										"value": "Tenant2",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN_TENANT1}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN_TENANT1\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "OdsInstanceGUID",
			"value": ""
		},
		{
			"key": "TOKEN_TENANT1",
			"value": ""
		},
		{
			"key": "TOKEN_TENANT2",
			"value": ""
		},
		{
			"key": "CreatedOdsInstanceId",
			"value": ""
		}
	]
}