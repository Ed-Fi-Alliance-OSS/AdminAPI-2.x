{
	"info": {
		"_postman_id": "06134786-54cf-428e-837f-b0729762b90b",
		"name": "Admin API E2E 2.0 - Profiles",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22794466"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "Profiles",
					"item": [
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"CreatedProfileId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles Duplicate Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0].toLowerCase()).to.contain(\"a profile with this name already exists in the database. please enter a unique name.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0].toLowerCase()).to.contain(\"'name' must not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid definition xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"test\");\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"readcontenttype\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><test/></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles - Name mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"match with test-profile-123\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile-123\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profiles: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profiles: Response result includes profiles\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetProfilesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Profile: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfilesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/Profiles/?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"Profiles",
										""
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Profiles - Without Offset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profiles: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profiles: Response result includes profiles\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetProfilesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Profile: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfilesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/Profiles/?limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"Profiles",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Profiles - Without Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profiles: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profiles: Response result includes profiles\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetProfilesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Profile: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfilesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/Profiles/?offset={{offset}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"Profiles",
										""
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Profiles - Without Offset and Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profiles: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profiles: Response result includes profiles\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetProfilesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Profile: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfilesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profile by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ProfileById: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ProfileById: Response result matches profile\", function () {\r",
											"    const result = pm.response.json();\r",
											"    pm.expect(result.name).to.equal(`Test-Profile`);\r",
											"    pm.expect(result.definition).to.not.be.empty;   \r",
											"});\r",
											"\r",
											"const GetProfileIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"definition\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"GET ProfileById: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfileIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profile by ID - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profile NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"profile\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistProfileId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{NotExistProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles Duplicate Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/Profiles`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"Name\": \"Other-Test-Profile\",\r",
											"        \"Definition\": \"<Profile name=\\\"Other-Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r",
											"    }), \r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"OtherCreatedProfileId\", id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Profiles: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0].toLowerCase()).to.contain(\"another profile with this name already exists in the database. please enter a unique name.\");\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/profiles/${pm.collectionVariables.get(\"OtherCreatedProfileId\")}`,\r",
											"  method: 'DELETE',\r",
											"  header: header\r",
											"},\r",
											"function (err, profileResponse) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{OtherCreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Profiles: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/profiles/${pm.collectionVariables.get(\"CreatedProfileId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (profileErr, profileResponse) {\r",
											"  if(profileErr) \r",
											"  { \r",
											"    console.log(\"Error :\", profileErr); \r",
											"  } \r",
											"  const updatedProfileJson = profileResponse.json();\r",
											"  pm.test(\"PUT Profiles: Response includes updated profile\", function () {\r",
											"    pm.expect(updatedProfileJson.name).to.equal(\"Updated-Test-Profile\");\r",
											"    pm.expect(updatedProfileJson.definition).to.not.be.empty;\r",
											"   });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Updated-Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profile NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"profile\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistProfileId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Not-Found\",\r\n    \"Definition\": \"<Profile name=\\\"Not-Found\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/profiles/{{NotExistProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0].toLowerCase()).to.contain(\"'name' must not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid definition xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"test\");\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"readcontenttype\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Updated-Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Test-Profile\\\"><Resource name=\\\"School\\\"><test/></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Name mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"match with test-profile-123\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile-123\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Profile: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profile NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"profile\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistProfileId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{NotExistProfileId}}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function randomIntFromInterval(min, max) { // min and max included ",
									"  return Math.floor(Math.random() * (max - min + 1) + min)",
									"}",
									"",
									"const rndInt = randomIntFromInterval(450, 783)",
									"pm.collectionVariables.set(\"NotExistProfileId\", pm.variables.replaceIn(rndInt));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{TOKEN}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "NotExistProfileId",
			"value": ""
		},
		{
			"key": "CreatedProfileId",
			"value": ""
		},
		{
			"key": "OtherCreatedProfileId",
			"value": "",
			"type": "string"
		}
	]
}