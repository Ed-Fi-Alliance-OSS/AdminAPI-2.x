{
	"info": {
		"_postman_id": "70201886-77da-4ac3-8025-bf60c4ab74d6",
		"name": "Admin API E2E 2.0 - AdminConsole - OdsInstances",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22794466"
	},
	"item": [
		{
			"name": "adminconsole",
			"item": [
				{
					"name": "OdsInstances",
					"item": [
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"AdminConsoleCreatedOdsInstanceId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"Instance #1 - 2024\",\r\n  \"instanceType\": \"enterprise\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2024\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"ReadReplica\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances Without OdsInstanceContext",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"Instance #1 - 2024 without OdsInstanceContext\",\r\n  \"instanceType\": \"enterprise\",\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"ReadReplica\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances Without OdsInstanceDerivative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"Instance #1 - 2024 without OdsInstanceDerivative\",\r\n  \"instanceType\": \"enterprise\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2024\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"InstanceType\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"name\": \"\",\r\n  \"instanceType\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid Name exceed length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"InstanceType\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx\",\r\n  \"instanceType\": \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET AdminConsole OdsInstances: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET AdminConsole OdsInstances: Response result includes AdminConsole OdsInstances\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetOdsInstancesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"tenantId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"instanceType\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"odsInstanceContexts\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": [\r",
											"            {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": {\r",
											"                        \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"instanceId\": {\r",
											"                        \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"contextKey\": {\r",
											"                        \"type\": \"string\"\r",
											"                    },\r",
											"                    \"contextValue\": {\r",
											"                        \"type\": \"string\"\r",
											"                    }\r",
											"                },\r",
											"                \"required\": [\r",
											"                    \"id\",\r",
											"                    \"instanceId\",\r",
											"                    \"contextKey\",\r",
											"                    \"contextValue\"\r",
											"                ]\r",
											"            }]\r",
											"        },\r",
											"        \"odsInstanceDerivatives\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": [\r",
											"            {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"id\": {\r",
											"                        \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"instanceId\": {\r",
											"                        \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"derivativeType\": {\r",
											"                        \"type\": \"string\"\r",
											"                    }\r",
											"                },\r",
											"                \"required\": [\r",
											"                    \"id\",\r",
											"                    \"instanceId\",\r",
											"                    \"derivativeType\"\r",
											"                ]\r",
											"            }]\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"tenantId\",\r",
											"        \"name\",\r",
											"        \"instanceType\",\r",
											"        \"baseUrl\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET OdsInstances: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances\", function () {\r",
											"    pm.expect(result.name).to.equal(\"updated Instance #1 - 2024\");\r",
											"    pm.expect(result.instanceType).to.equal(\"updated enterprise\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceContexts[0].contextValue).to.equal(\"2025\");\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceDerivatives[0].derivativeType).to.equal(\"Snapshot\");\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"updated Instance #1 - 2024\",\r\n  \"instanceType\": \"updated enterprise\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances Remove OdsInstanceContext",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances\", function () {\r",
											"    pm.expect(result.name).to.equal(\"updated Instance #1 - 2024\");\r",
											"    pm.expect(result.instanceType).to.equal(\"updated enterprise\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.equal(0);\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.be.greaterThan(0);\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"updated Instance #1 - 2024\",\r\n  \"instanceType\": \"updated enterprise\",\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances Remove OdsInstanceDerivative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances\", function () {\r",
											"    pm.expect(result.name).to.equal(\"updated Instance #1 - 2024\");\r",
											"    pm.expect(result.instanceType).to.equal(\"updated enterprise\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.equal(0);\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.equal(0);\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"updated Instance #1 - 2024\",\r\n  \"instanceType\": \"updated enterprise\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances Adding Back Both",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances\", function () {\r",
											"    pm.expect(result.name).to.equal(\"updated Instance #1 - 2024\");\r",
											"    pm.expect(result.instanceType).to.equal(\"updated enterprise\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceContexts[0].contextValue).to.equal(\"2026\");\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceDerivatives[0].derivativeType).to.equal(\"ReadReplica\");\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"updated Instance #1 - 2024\",\r\n  \"instanceType\": \"updated enterprise\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2026\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"ReadReplica\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"InstanceType\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"name\": \"\",\r\n  \"instanceType\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid Name exceed length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT AdminConsole OdsInstances Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"InstanceType\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx\",\r\n  \"instanceType\": \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances - Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Instances: Status code is No Content - Delete\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}/completed"
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Admin Console OdsInstances: Status code is Accepted\", function () {\r",
											"    pm.response.to.have.status(202); //Has to verified 202\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jsHelperVar = pm.variables.get('jsHelper');\r",
											"const jsHelper = eval(jsHelperVar);\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"        \"tenantId\": 1,\r",
											"        \"tenantName\": \"tenant1\",\r",
											"        \"name\": \"Test999999999\",\r",
											"        \"instanceType\": \"Test999999999\",\r",
											"        \"odsInstanceContexts\": [],\r",
											"        \"odsInstanceDerivatives\": []\r",
											"    }), \r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"  console.log(\"ID OdsInstance: \" + id)\r",
											"  if(id)\r",
											"    {\r",
											"        \r",
											"        pm.sendRequest({\r",
											"            url: `${pm.variables.get(\"API_URL\")}/adminconsole/instances/${id}/completed`,\r",
											"            method: 'POST',\r",
											"            header: header\r",
											"            },\r",
											"            function (odsInstanceErr, odsInstanceResponse) {\r",
											"            if(odsInstanceErr) \r",
											"            { \r",
											"                console.log(\"Error on completed the instance:\", odsInstanceErr); \r",
											"            } \r",
											"            pm.collectionVariables.set(\"AdminConsoleCreatedOdsInstanceIdToDelete\", id);\r",
											"            console.log(\"ID OdsInstance Collection: \" + pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceIdToDelete\"))\r",
											"            console.log(JSON.stringify(odsInstanceResponse))\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE AdminConsole OdsInstances: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/999999999"
							},
							"response": []
						}
					]
				},
				{
					"name": "OdsInstances - Delete",
					"item": [
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Created - Delete\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances: Response includes location in header - Delete\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"AdminConsoleCreatedOdsInstanceId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"Instance #1 - 2024 - Delete\",\r\n  \"instanceType\": \"enterprise\",\r\n  \"odsInstanceContexts\": null,\r\n  \"odsInstanceDerivatives\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstance - Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Created - Delete\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances - Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Instances: Status code is No Content - Delete\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}/completed"
							},
							"response": []
						},
						{
							"name": "OdsInstance - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Not Found - Delete\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let id = pm.variables.get(\"AdminConsoleCreatedOdsInstanceId\"); \r",
											"id = parseInt(id) + 10; \r",
											"pm.variables.set(\"ModifiedAdminConsoleOdsInstanceId\", id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/{{ModifiedAdminConsoleOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Accepted - Delete\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET AdminConsole Instances: The response includes a status property with the value 'Pending_Delete' - Delete\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\", \"Pending_Delete\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstance Unauthorized - Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstances: Status code is Unauthorized - Delete\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{INVALIDTOKEN}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstance Unauthorized - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstances: Status code is Unauthorized - Delete\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{EXPIREDTOKEN}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "OdsInstance - Rename",
					"item": [
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Created - Rename\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST AdminConsole OdsInstances: Response includes location in header - Rename\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"AdminConsoleCreatedOdsInstanceId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"tenant1\",\r\n  \"name\": \"Instance #1 - 2024 - Rename\",\r\n  \"instanceType\": \"enterprise\",\r\n  \"odsInstanceContexts\": null,\r\n  \"odsInstanceDerivatives\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances"
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK - Rename\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances - Rename\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Instance #1 - 2024 - Rename\");\r",
											"    pm.expect(result.instanceType).to.equal(\"enterprise1\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceContexts[0].contextValue).to.equal(\"2025\");\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceDerivatives[0].derivativeType).to.equal(\"Snapshot\");\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"Instance #1 - 2024 - Rename\",\r\n  \"instanceType\": \"enterprise1\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST AdminConsole OdsInstances: Status code is Not Found - Rename\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let id = pm.variables.get(\"AdminConsoleCreatedOdsInstanceId\"); \r",
											"id = parseInt(id) + 10; \r",
											"pm.variables.set(\"ModifiedAdminConsoleOdsInstanceId\", id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"Instance #1 - 2024\",\r\n  \"instanceType\": \"enterprise1\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{ModifiedAdminConsoleOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET AdminConsole Instances: The response includes a status property with the value different than 'Pending_Rename'- Rename\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).not.to.equal(\"Pending_Rename\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK - Rename\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances - Rename\", function () {\r",
											"    pm.expect(result.name).to.equal(\"updated Instance #1 - 2024 - Rename\");\r",
											"    pm.expect(result.instanceType).to.equal(\"updated enterprise1\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceContexts[0].contextValue).to.equal(\"2025\");\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceDerivatives[0].derivativeType).to.equal(\"Snapshot\");\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"updated Instance #1 - 2024 - Rename\",\r\n  \"instanceType\": \"updated enterprise1\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET AdminConsole Instances: The response includes a status property with the value different than 'Pending_Rename' - Rename\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).not.to.equal(\"Pending_Rename\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances - Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Instances: Status code is No Content - Rename\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}/completed"
							},
							"response": []
						},
						{
							"name": "OdsInstances - Rename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT AdminConsole OdsInstances: Status code is OK - Rename\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/adminconsole/odsInstances/${pm.collectionVariables.get(\"AdminConsoleCreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const result = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT AdminConsole OdsInstances: Response includes updated AdminConsole OdsInstances - Rename\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Instance #1 - 2024 - Renamed\");\r",
											"    pm.expect(result.instanceType).to.equal(\"updated enterprise1\");\r",
											"\r",
											"    pm.expect(result.odsInstanceContexts.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceContexts[0].contextValue).to.equal(\"2025\");\r",
											"\r",
											"    pm.expect(result.odsInstanceDerivatives.length).to.be.greaterThan(0);\r",
											"    pm.expect(result.odsInstanceDerivatives[0].derivativeType).to.equal(\"Snapshot\");\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"Instance #1 - 2024 - Renamed\",\r\n  \"instanceType\": \"updated enterprise1\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "Instances - Status Rename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET AdminConsole Instances: The response includes a status property with the value 'Pending_Rename' - Rename\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\", \"Pending_Rename\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/adminconsole/instances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances Unauthorized - Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstances: Status code is Unauthorized - Rename\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{INVALIDTOKEN}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"Instance #1 - 2024 renamed\",\r\n  \"instanceType\": \"updated enterprise1\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						},
						{
							"name": "OdsInstances Unauthorized - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstances: Status code is Unauthorized - Rename\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{EXPIREDTOKEN}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tenantId\": 1,\r\n  \"tenantName\": \"Test\",\r\n  \"name\": \"Instance #1 - 2024 renamed\",\r\n  \"instanceType\": \"updated enterprise1\",\r\n  \"odsInstanceContexts\": [\r\n    {\r\n      \"contextKey\": \"schoolYearFromRoute\",\r\n      \"contextValue\": \"2025\"\r\n    }\r\n  ],\r\n  \"odsInstanceDerivatives\": [\r\n    {\r\n      \"derivativeType\": \"Snapshot\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/adminconsole/odsInstances/{{AdminConsoleCreatedOdsInstanceId}}"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{TOKEN}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "OtherApplicationVendorIdwithVendor",
			"value": ""
		},
		{
			"key": "OtherApplicationId",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "AdminConsoleCreatedOdsInstanceId",
			"value": ""
		},
		{
			"key": "OdsInstanceId_v2",
			"value": "",
			"type": "string"
		}
	]
}