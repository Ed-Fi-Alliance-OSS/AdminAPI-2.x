{
	"info": {
		"_postman_id": "d327aadc-5703-41da-9ee8-113331168025",
		"name": "Admin API E2E 2.0 - Tenants",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22794466"
	},
	"item": [
		{
			"name": "V2",
			"item": [
				{
					"name": "Tenants",
					"item": [
						{
							"name": "Tenants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"POST Tenants: Status code is Created\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"}",
											"else {",
											"    pm.test(\"Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"message\");",
											"    });",
											"",
											"    pm.test(\"Response title is helpful and accurate\", function () {",
											"        pm.expect(response.message.toLowerCase()).to.contain(\"not multitenant environment.\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"CreatedTenantName\", \"Tenant-\" + pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"TenantName\": \"{{CreatedTenantName}}\",\r\n  \"EdFiSecurityConnectionString\": \"{{securityconnectionString}}\",\r\n  \"EdFiAdminConnectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants Just Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"POST Tenants: Status code is Created\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"}",
											"else {",
											"    pm.test(\"Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"message\");",
											"    });",
											"",
											"    pm.test(\"Response title is helpful and accurate\", function () {",
											"        pm.expect(response.message.toLowerCase()).to.contain(\"not multitenant environment.\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"TenantGUID2\", pm.variables.replaceIn('{{$guid}}'));\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"TenantName\": \"Tenant-{{TenantGUID2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants - Invalid Api Mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response matches error format\", function () {",
											"    pm.expect(response).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Response title is helpful and accurate\", function () {",
											"    pm.expect(response.message.toLowerCase()).to.contain(\"wrong api version for this instance mode.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"TenantName\": \"Tenant-{{TenantGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v1/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants - Invalid Admin connection string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"        pm.test(\"POST Tenants Invalid EdFiAdminConnectionString: Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"POST Tenants Invalid EdFiAdminConnectionString: Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"title\");",
											"        pm.expect(response).to.have.property(\"errors\");",
											"    });",
											"",
											"    pm.test(\"POST Tenants Invalid EdFiAdminConnectionString: Response title is helpful and accurate\", function () {",
											"        pm.expect(response.title.toLowerCase()).to.contain(\"validation\");",
											"    });",
											"",
											"    pm.test(\"POST Tenants Invalid ConnectionString: Response errors include messages by property\", function () {",
											"        pm.expect(response.errors[\"EdFiAdminConnectionString\"].length).to.equal(1);",
											"    });",
											"",
											"    pm.test(\"POST Tenants Invalid ConnectionString: Response errors include messages with wrong elements\", function () {",
											"        pm.expect(response.errors[\"EdFiAdminConnectionString\"][0]).to.contain(\"is not valid\");",
											"    });",
											"}",
											"else {",
											"    pm.test(\"Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"message\");",
											"    });",
											"",
											"    pm.test(\"Response title is helpful and accurate\", function () {",
											"        pm.expect(response.message.toLowerCase()).to.contain(\"not multitenant environment.\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"TenantName\": \"Tenant-{{TenantGUID}}\",\r\n  \"EdFiSecurityConnectionString\": \"{{securityconnectionString}}\",\r\n  \"EdFiAdminConnectionString\": \"not-valid-connection-string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants - Invalid Security connection string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"POST Tenants Invalid EdFiSecurityConnectionString: Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"POST Tenants Invalid EdFiSecurityConnectionString: Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"title\");",
											"        pm.expect(response).to.have.property(\"errors\");",
											"    });",
											"",
											"    pm.test(\"POST Tenants Invalid EdFiSecurityConnectionString: Response title is helpful and accurate\", function () {",
											"        pm.expect(response.title.toLowerCase()).to.contain(\"validation\");",
											"    });",
											"",
											"    pm.test(\"POST Tenants Invalid ConnectionString: Response errors include messages by property\", function () {",
											"        pm.expect(response.errors[\"EdFiSecurityConnectionString\"].length).to.equal(1);",
											"    });",
											"",
											"    pm.test(\"POST Tenants Invalid ConnectionString: Response errors include messages with wrong elements\", function () {",
											"        pm.expect(response.errors[\"EdFiSecurityConnectionString\"][0]).to.contain(\"is not valid\");",
											"    });",
											"}",
											"else {",
											"    pm.test(\"Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"message\");",
											"    });",
											"",
											"    pm.test(\"Response title is helpful and accurate\", function () {",
											"        pm.expect(response.message.toLowerCase()).to.contain(\"not multitenant environment.\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"TenantName\": \"Tenant-{{TenantGUID}}\",\r\n  \"EdFiSecurityConnectionString\": \"not-valid-connection-string\",\r\n  \"EdFiAdminConnectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Tenants: Status code is Found\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const GetTenantsSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"tenantName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"adminConnectionString\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"host\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"database\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"        },",
											"        \"securityConnectionString\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"host\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"database\": {",
											"              \"type\": \"string\"",
											"            }",
											"          }",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"tenantName\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET Tenants: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetTenantsSchema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants - Invalid Api Mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response matches error format\", function () {",
											"    pm.expect(response).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Response title is helpful and accurate\", function () {",
											"    pm.expect(response.message.toLowerCase()).to.contain(\"wrong api version for this instance mode.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/tenants",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Tenants: Status code is Invalid\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/tenant",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants by Tenant Name - Multitenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"GET Tenants by Tenant Id: Status code is Found\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"    const result = pm.response.json();",
											"",
											"    pm.test(\"GET Tenant Name: Response result matches tenant\", function () {",
											"        const tenantName = pm.collectionVariables.get(\"CreatedTenantName\");",
											"",
											"        pm.expect(result.tenantName).to.equal(tenantName);",
											"        pm.expect(result.adminConnectionString.host).to.not.equal(null);",
											"        pm.expect(result.adminConnectionString.database).to.not.equal(null);",
											"        pm.expect(result.securityConnectionString.host).to.not.equal(null);",
											"        pm.expect(result.securityConnectionString.database).to.not.equal(null);",
											"    });",
											"",
											"    const GetTenantsByTenantSchema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"        \"tenantName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"adminConnectionString\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"            \"host\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"database\": {",
											"                \"type\": \"string\"",
											"            }",
											"            },",
											"        },",
											"        \"securityConnectionString\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"            \"host\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"database\": {",
											"                \"type\": \"string\"",
											"            }",
											"            }",
											"        }",
											"        },",
											"        \"required\": [",
											"        \"tenantName\"",
											"        ]",
											"    }",
											"",
											"    pm.test(\"GET Tenants by Tenant Id: Validation Schema Response\", () => {",
											"        pm.response.to.have.jsonSchema(GetTenantsByTenantSchema);",
											"    });",
											"}",
											"else {",
											"    pm.test(\"GET Tenants by Tenant Id: Status code is Found\", function () {",
											"        pm.response.to.have.status(404);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/tenants/{{CreatedTenantName}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants",
										"{{CreatedTenantName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants by Tenant Name - Singletenant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"false\") {",
											"    pm.test(\"GET Tenants by Tenant Id: Status code is Found\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"    const result = pm.response.json();",
											"",
											"    pm.test(\"GET Tenant Name: Response result matches tenant\", function () {",
											"        pm.expect(result.tenantName).to.equal(\"default\");",
											"        pm.expect(result.adminConnectionString.host).to.not.equal(null);",
											"        pm.expect(result.adminConnectionString.database).to.not.equal(null);",
											"        pm.expect(result.securityConnectionString.host).to.not.equal(null);",
											"        pm.expect(result.securityConnectionString.database).to.not.equal(null);",
											"    });",
											"",
											"    const GetTenantsByTenantSchema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"        \"tenantName\": {",
											"            \"type\": \"string\"",
											"        },",
											"        \"adminConnectionString\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"            \"host\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"database\": {",
											"                \"type\": \"string\"",
											"            }",
											"            },",
											"        },",
											"        \"securityConnectionString\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"            \"host\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"database\": {",
											"                \"type\": \"string\"",
											"            }",
											"            }",
											"        }",
											"        },",
											"        \"required\": [",
											"        \"tenantName\"",
											"        ]",
											"    }",
											"",
											"    pm.test(\"GET Tenants by Tenant Id: Validation Schema Response\", () => {",
											"        pm.response.to.have.jsonSchema(GetTenantsByTenantSchema);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/tenants/default",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants by Tenant Name Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Tenants: Status code is Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/tenants/notexistingtenantname",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants",
										"notexistingtenantname"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants - Invalid Api Mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response matches error format\", function () {",
											"    pm.expect(response).to.have.property(\"message\");",
											"});",
											"",
											"pm.test(\"Response title is helpful and accurate\", function () {",
											"    pm.expect(response.message.toLowerCase()).to.contain(\"wrong api version for this instance mode.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/tenants/{{CreatedTenantName}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"tenants",
										"{{CreatedTenantName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tenants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    pm.test(\"DELETE Tenants: Status code is OK\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											"else {",
											"    pm.test(\"Status code is Bad Request\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"",
											"    const response = pm.response.json();",
											"",
											"    pm.test(\"Response matches error format\", function () {",
											"        pm.expect(response).to.have.property(\"message\");",
											"    });",
											"",
											"    pm.test(\"Response title is helpful and accurate\", function () {",
											"        pm.expect(response.message.toLowerCase()).to.contain(\"not multitenant environment.\");",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/tenants/{{CreatedTenantName}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"tenants",
										"{{CreatedTenantName}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		}
	]
}