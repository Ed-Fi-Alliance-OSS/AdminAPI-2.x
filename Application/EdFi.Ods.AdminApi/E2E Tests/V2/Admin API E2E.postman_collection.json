{
	"info": {
		"_postman_id": "a5c2ba02-c52d-4df2-9f16-e3bd8b76d89e",
		"name": "Admin API E2E 2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Landing",
			"item": [
				{
					"name": "Landing Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET Landing: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Landing: Response includes expected properties\", function () {\r",
									"    pm.expect(response).to.have.property(\"version\");\r",
									"    pm.expect(response).to.have.property(\"build\");\r",
									"});\r",
									"\r",
									"const GetSchemaLanding =  {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"version\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"build\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"version\",\r",
									"    \"build\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"GET Landing: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(GetSchemaLanding);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}",
							"host": [
								"{{API_URL}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"POST Register: Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"client\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"registered\");\r",
									"});\r",
									"\r",
									"const PostRegisterSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"status\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Register: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostRegisterSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"RegisteredClientId\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.collectionVariables.set(\"RegisteredClientSecret\", pm.variables.replaceIn('{{$guid}}'));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "Postman Test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register Invalid: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Register Invalid: Response matches error format\", function () {\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Invalid: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Invalid: Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"ClientId\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ClientSecret\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"DisplayName\"].length).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register Already Exists: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response matches error format\", function () {\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.ClientId.length).to.equal(1);\r",
									"    pm.expect(response.errors.ClientId[0]).to.contain(\"already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "{{UserName}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token: Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"const PostTokenSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"access_token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"token_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"expires_in\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"access_token\",\r",
									"    \"token_type\",\r",
									"    \"expires_in\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Token: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostTokenSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Invalid: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Invalid: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid Grant Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Invalid Grant Type: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Invalid Grant Type: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"grant_type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Invalid Scope: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Invalid Scope: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"scope\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "NOT_REAL/SCOPE",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Incorrect Secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Incorrect Secret: Status code is Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Incorrect Secret: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response).to.have.property(\"error_uri\");\r",
									"\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"credentials\");\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"invalid\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"RegisteredClientId\");\r",
									"pm.collectionVariables.unset(\"RegisteredClientSecret\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Vendors",
					"item": [
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Vendors: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Vendors: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/vendors/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors: Response result includes vendor info\", function () {\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedVendorId\", result.id);\r",
											"}\r",
											"\r",
											"const PostVendorSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"company\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"namespacePrefixes\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactEmailAddress\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"company\",\r",
											"    \"namespacePrefixes\",\r",
											"    \"contactName\",\r",
											"    \"contactEmailAddress\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"POST Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PostVendorSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Test Company\",\r\n    \"namespacePrefixes\": \"uri://ed-fi.org\",\r\n    \"contactName\": \"Test User\",\r\n    \"contactEmailAddress\": \"test@test-ed-fi.org\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									]
								}
							},
							"response": [
								{
									"name": "Vendor with multiple namespaces",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"company\": {{CompanyName}},\r\n    \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\r\n    \"contactName\": {{ContactName}},\r\n    \"contactEmailAddress\": {{ContactEmail}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_URL}}/vendors",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Thu, 02 Jun 2022 23:13:53 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Location",
											"value": "/Vendors/2"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"result\": {\n        \"vendorId\": 2,\n        \"company\": \"Test Company\",\n        \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\n        \"contactName\": \"Test User\",\n        \"contactEmailAddress\": \"test@test-ed-fi.org\"\n    },\n    \"status\": 201,\n    \"title\": \"Vendor created successfully\"\n}"
								}
							]
						},
						{
							"name": "Vendors - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Vendors Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"\",\r\n    \"namespacePrefixes\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendors: Response result includes vendors\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfVendor = results.map(\r",
											"        function(vendor) { return vendor.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"\r",
											"    const result = results[indexOfVendor];\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											"\r",
											"const GetVendorsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"company\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"namespacePrefixes\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactEmailAddress\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"company\",\r",
											"        \"namespacePrefixes\",\r",
											"        \"contactName\",\r",
											"        \"contactEmailAddress\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendor ID: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendor ID: Response result matches vendor\", function () {\r",
											"    const vendorId = pm.collectionVariables.get(\"CreatedVendorId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(vendorId);\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											"\r",
											"const GetVendorIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"company\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"namespacePrefixes\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactEmailAddress\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"company\",\r",
											"    \"namespacePrefixes\",\r",
											"    \"contactName\",\r",
											"    \"contactEmailAddress\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET VendorsID: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Vendors: Response result includes updated vendor\", function () {\r",
											"    pm.expect(result.company).to.equal(\"Updated Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://academicbenchmarks.com\");\r",
											"    pm.expect(result.contactName).to.equal(\"Updated User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"updated@example.com\");\r",
											"});\r",
											"\r",
											"const PutVendorsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"company\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"namespacePrefixes\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactEmailAddress\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"company\",\r",
											"    \"namespacePrefixes\",\r",
											"    \"contactName\",\r",
											"    \"contactEmailAddress\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"PUT Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutVendorsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Vendors Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Vendors Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE Vendors: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE Vendors: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteVendorSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteVendorSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors -  Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Application",
					"item": [
						{
							"name": "Applications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Application Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Application User\",\r",
											"      \"contactEmailAddress\": \"application@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const json = response.json();\r",
											"  if(!json.id) { console.log('Error in Pre-request: vendorID missing from response. Response is:', json); }\r",
											"  else {\r",
											"    pm.collectionVariables.set(\"ApplicationVendorId\", json.id);\r",
											"  }\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v1/odsinstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  }\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const json = response.json();\r",
											"  if(!json[0].odsInstanceId) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }\r",
											"  else {\r",
											"    pm.collectionVariables.set(\"ODSInstanceId\", json[0].odsInstanceId);\r",
											"  }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"POST Applications: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/applications/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications: Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedApplicationId\", result.id);\r",
											"}\r",
											"\r",
											"const PostApplicationSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"secret\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"secret\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"POST Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PostApplicationSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceId\": {{ODSInstanceId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Applications Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"OdsInstanceId\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [],\r\n  \"odsInstanceId\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid Vendor: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Applications Invalid Vendor: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Vendor: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Vendor: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
											"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceId\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid Profile: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST Applications Invalid Profile: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Profile: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid Profile: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ProfileIds.length).to.equal(1);\r",
											"    pm.expect(response.errors.ProfileIds[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [ 9999 ],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceId\": {{ODSInstanceId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid OdsInstance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Applications Invalid ODSInstance: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST Applications Invalid ODSInstance: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid ODSInstance: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Applications Invalid ODSInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.OdsInstanceId.length).to.equal(1);\r",
											"    pm.expect(response.errors.OdsInstanceId[0]).to.contain(\"provide valid ods instance id.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [ 9999 ],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceId\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Applications: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceid).to.not.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Applications: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"           \"type\": \"array\",\r",
											"           \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceId\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ApplicationID: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ApplicationID: Response result matches application\", function () {\r",
											"    const applicationId = pm.collectionVariables.get(\"CreatedApplicationId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(applicationId);\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceId).to.not.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ApplicationID: Response result does not include key or secret\", function () {  \r",
											"    pm.expect(result).to.not.have.property(\"key\");\r",
											"    pm.expect(result).to.not.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"const GetApplicationId = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"applicationName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"claimSetName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"educationOrganizationIds\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"vendorId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"profileIds\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"odsInstanceId\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"applicationName\",\r",
											"    \"claimSetName\",\r",
											"    \"educationOrganizationIds\",\r",
											"    \"vendorId\",\r",
											"    \"profileIds\",\r",
											"    \"odsInstanceId\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ApplicationId: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications by Vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Application by Vendor: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Response result includes applications\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfApplication = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"\r",
											"    const result = results[indexOfApplication];\r",
											"    pm.expect(result.applicationName).to.equal(\"Test Application\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceId).to.not.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Response result is filtered by vendor\", function () {\r",
											"    const resultApplicationIds = results.map(\r",
											"        function(application) { return application.id; }\r",
											"    );\r",
											"\r",
											"    pm.expect(resultApplicationIds).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"    pm.expect(resultApplicationIds).to.not.contain(pm.collectionVariables.get(\"OtherApplicationId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Response results do not include key or secret\", function () {\r",
											"    results.forEach(function(result, i) {\r",
											"        pm.expect(result).to.not.have.property(\"key\");\r",
											"        pm.expect(result).to.not.have.property(\"secret\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const GetApplicationByVendor = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceId\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Application by Vendor: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetApplicationByVendor);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"company\": \"Other Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Other Application User\",\r",
											"      \"contactEmailAddress\": \"otherapplication@example.com\"\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (vendorErr, vendorResponse) {\r",
											"  if(vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }\r",
											"  const vendorJson = vendorResponse.json();\r",
											"  if(!vendorJson.id) { console.log('Error in Pre-request: vendorID missing from response. Response is:', vendorJson); }\r",
											"  pm.collectionVariables.set(\"OtherApplicationVendorId\", vendorJson.id);\r",
											"\r",
											"  pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v2/applications`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",\r",
											"        \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw:JSON.stringify({\r",
											"        \"applicationName\": \"Other Vendor Application\",\r",
											"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"        \"claimSetName\": \"Ed-Fi Sandbox\",\r",
											"        \"profileIds\": [],\r",
											"        \"educationOrganizationIds\": [ 255901 ],\r",
											"        \"odsInstanceId\": 1\r",
											"      }),\r",
											"    }\r",
											"  },  \r",
											"  function (appErr, appResonse) {\r",
											"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"    const appJson = appResonse.json();\r",
											"    if(!appJson.id) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }\r",
											"    else {\r",
											"      pm.collectionVariables.set(\"OtherApplicationId\", appJson.id);\r",
											"    }\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{ApplicationVendorId}}/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{ApplicationVendorId}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Application: Response result includes updated application\", function () {\r",
											"    pm.expect(result.applicationName).to.equal(\"Updated Application Name\");\r",
											"    pm.expect(result.claimSetName).to.equal(\"Ed-Fi ODS Admin App\");\r",
											"    pm.expect(result.educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result.profileIds.length).to.equal(0);\r",
											"    pm.expect(result.odsInstanceId).to.not.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application: Response result does not include application key and secret\", function () {\r",
											"    pm.expect(result).to.not.have.property(\"key\");\r",
											"    pm.expect(result).to.not.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application: Request updated Application/Vendor relationship\", function () {\r",
											"    pm.sendRequest({\r",
											"      url: `${pm.variables.get(\"API_URL\")}/v2/vendors/${pm.collectionVariables.get(\"ApplicationVendorId\")}/applications`,\r",
											"      method: 'GET',\r",
											"      header: {\r",
											"          \"Content-Type\": \"application/json\",\r",
											"          \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"      },\r",
											"      body: {\r",
											"        mode: 'raw',\r",
											"        raw:JSON.stringify({\r",
											"          \"company\": \"Application Company\",\r",
											"          \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"          \"contactName\": \"Application User\",\r",
											"          \"contactEmailAddress\": \"application@example.com\"\r",
											"        }), \r",
											"      }\r",
											"  },  \r",
											"  function (err, response) {\r",
											"    if(err) { console.log(\"Error in test request:\", err); }\r",
											"    if(response.code != 200) { console.log('Error in  test request. Response is:', response); }\r",
											"    const results = response.json();\r",
											"    pm.expect(results.length).to.equal(0);\r",
											"  });\r",
											"});\r",
											"\r",
											"const PutApplicationSchema = {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceId\"\r",
											"      ]\r",
											"    }\r",
											"\r",
											"pm.test(\"PUT Application: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutApplicationSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceId\": {{ODSInstanceId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Application Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ApplicationName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ClaimSetName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"EducationOrganizationIds\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [],\r\n  \"odsInstanceId\": {{ODSInstanceId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid Vendor: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Application Invalid Vendor: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Vendor: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Vendor: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.VendorId.length).to.equal(1);\r",
											"    pm.expect(response.errors.VendorId[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": 9999,\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceId\": 10\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Invalid Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application Invalid Profile: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT Application Invalid Profile: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Profile: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application Invalid Profile: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ProfileIds.length).to.equal(1);\r",
											"    pm.expect(response.errors.ProfileIds[0]).to.contain(\"not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Updated Application Name\",\r\n  \"vendorId\": {{OtherApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi ODS Admin App\",\r\n  \"profileIds\": [9999],\r\n  \"educationOrganizationIds\": [1234],\r\n  \"odsInstanceId\": {{ODSInstanceId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResetCredentials: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResetCredentials: Response result includes application key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"key\");\r",
											"    pm.expect(result).to.have.property(\"secret\");\r",
											"});\r",
											"\r",
											"const PutResetCredentialsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"key\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"secret\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"key\",\r",
											"    \"secret\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"PUT Reset Credentials: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutResetCredentialsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}/reset-credential",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}",
										"reset-credential"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Applications: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE Applications: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE Applications: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"application\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteApplicationsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE Applications: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteApplicationsSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Application NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Application NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Credential - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Reset Credential NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Reset Credential NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Reset Credential NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}/reset-credential",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}",
										"reset-credential"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Application NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Application NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"applicationId\": {{CreatedApplicationId}},\r\n  \"applicationName\": \"Test Application\",\r\n  \"vendorId\": {{ApplicationVendorId}},\r\n  \"claimSetName\": \"Ed-Fi Sandbox\",\r\n  \"profileIds\": [],\r\n  \"educationOrganizationIds\": [ 255901 ],\r\n  \"odsInstanceId\": {{ODSInstanceId}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Applications - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL Application NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Application NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Application NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"application\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedApplicationId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"ApplicationVendorId\");\r",
											"pm.collectionVariables.unset(\"CreatedApplicationId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/applications/{{CreatedApplicationId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"applications",
										"{{CreatedApplicationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ClaimSets",
					"item": [
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"ClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/claimsets/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response result includes claimSet key and secret\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"if(result.id) {\r",
											"    pm.collectionVariables.set(\"CreatedClaimSetId\", result.id);\r",
											"}\r",
											"\r",
											"const PostClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"read\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"create\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"update\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"delete\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"_defaultAuthStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"authStrategyId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"authStrategyName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"displayName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"isInheritedFromParent\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"authStrategyId\",\r",
											"                    \"authStrategyName\",\r",
											"                    \"displayName\",\r",
											"                    \"isInheritedFromParent\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"read\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"create\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"update\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"delete\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"_defaultAuthStrategiesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"object\",\r",
											"                          \"properties\": {\r",
											"                            \"authStrategyId\": {\r",
											"                              \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"authStrategyName\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"displayName\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"isInheritedFromParent\": {\r",
											"                              \"type\": \"boolean\"\r",
											"                            }\r",
											"                          },\r",
											"                          \"required\": [\r",
											"                            \"authStrategyId\",\r",
											"                            \"authStrategyName\",\r",
											"                            \"displayName\",\r",
											"                            \"isInheritedFromParent\"\r",
											"                          ]\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"authStrategyOverridesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"children\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": {}\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"name\",\r",
											"                    \"read\",\r",
											"                    \"create\",\r",
											"                    \"update\",\r",
											"                    \"delete\",\r",
											"                    \"_defaultAuthStrategiesForCRUD\",\r",
											"                    \"authStrategyOverridesForCRUD\",\r",
											"                    \"children\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"read\",\r",
											"            \"create\",\r",
											"            \"update\",\r",
											"            \"delete\",\r",
											"            \"_defaultAuthStrategiesForCRUD\",\r",
											"            \"authStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"POST ClaimSets: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PostClaimSetsSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test ClaimSet {{ClaimSetGUID}}\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Json: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimsets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Resource Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Resource Name: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Name: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Name: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Name: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(2);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"learningStandard-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[1]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"ClaimSet-WithWrongResource\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards-123\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard-123\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Parent Child Relationship: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wrong-Parent-Child-Relation\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Resource Duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Resource Duplcation: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'learningStandard'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Resource-Duplication\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          },\r\n\t\t  {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": {\r\n    \"create\": true,\r\n    \"read\": true,\r\n    \"update\": true,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaimActions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaimActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(2);\r",
											"    pm.expect(response.errors.ResourceClaims[0]).to.contain(\"which is not in the system\");\r",
											"    pm.expect(response.errors.ResourceClaims[1]).to.contain(\"have at least one action\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4000,\r\n  \"resourceClaimActions\": {\r\n    \"create\": false,\r\n    \"read\": false,\r\n    \"update\": false,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaimActions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaimActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": {\r\n    \"create\": true,\r\n    \"read\": true,\r\n    \"update\": false,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action ClaimSet not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction Not Found: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction Not Found: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": {\r\n    \"create\": true,\r\n    \"read\": true,\r\n    \"update\": false,\r\n    \"delete\": false\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/90000/resourceclaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"90000",
										"resourceclaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"create\",\r\n  \"authStrategyName\": \"RelationshipsWithStudentsOnly\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaims/4/overrideauthstrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaims",
										"4",
										"overrideauthstrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaim.length).to.equal(1);\r",
											"    pm.expect(response.errors.ResourceClaim[0]).to.contain(\"doesn't exist\");\r",
											"    pm.expect(response.errors.AuthStrategyName.length).to.equal(1);\r",
											"    pm.expect(response.errors.AuthStrategyName[0]).to.contain(\"doesn't exist\");\r",
											"    pm.expect(response.errors.ActionName.length).to.equal(1);\r",
											"    pm.expect(response.errors.ActionName[0]).to.contain(\"doesn't exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"NotExist\",\r\n  \"authStrategyName\": \"RelationshipsWithStudentsOnlys\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaims/4000/overrideauthstrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaims",
										"4000",
										"overrideauthstrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Auth Strategies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthStrategies: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaims/4/resetauthstrategies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaims",
										"4",
										"resetauthstrategies"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Auth Strategies Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthStrategies: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaims/40000/resetauthstrategies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaims",
										"40000",
										"resetauthstrategies"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaims/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaims",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}/resourceclaims/4000",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}",
										"resourceclaims",
										"4000"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy- Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimsets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimsets`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": [{\r",
											"        \"name\": \"educationStandards\",\r",
											"        \"read\": true,\r",
											"        \"create\": true,\r",
											"        \"update\": true,\r",
											"        \"delete\": true,\r",
											"        \"defaultAuthStrategiesForCRUD\": [\r",
											"          {\r",
											"            \"authStrategyName\": \"NamespaceBased\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          },\r",
											"          {\r",
											"            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          },\r",
											"          {\r",
											"            \"authStrategyName\": \"NamespaceBased\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          },\r",
											"          {\r",
											"            \"authStrategyName\": \"NamespaceBased\",\r",
											"            \"isInheritedFromParent\": false\r",
											"          }\r",
											"        ],\r",
											"        \"authStrategyOverridesForCRUD\": [\r",
											"          null,\r",
											"          null,\r",
											"          null,\r",
											"          null\r",
											"        ]\r",
											"    }]\r",
											"  })\r",
											" }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSetJson = claimSetResponse.json();\r",
											"  if(!claimSetJson.id) { console.log('Error in Pre-request: claimset ID missing from response. Response is:', claimSetJson); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", claimSetJson.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    pm.response.to.be.header(\"Location\", `/claimsets/${result.id}`);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response result claimset has expected name and resource claims\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"name\");\r",
											"    pm.expect(result.name).contains(\"Copied ClaimSet from\");\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const resourceclaimexists = result.resourceClaims.any(r => r.name === \"educationStandards\")\r",
											"    pm.expect(resourceclaimexists).to.equal(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Copied ClaimSet from {{OtherExistingClaimSetId}}\",\r\n    \"originalid\": {{OtherExistingClaimSetId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/copy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"copy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy- Invalid ClaimSet Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomIntFromInterval(min, max) { // min and max included \r",
											"  return Math.floor(Math.random() * (max - min + 1) + min)\r",
											"}\r",
											"\r",
											"const rndInt = randomIntFromInterval(450, 783)\r",
											"pm.collectionVariables.set(\"NotExistClaimSetId\", pm.variables.replaceIn(rndInt));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.title).to.contains(\"Not found\");\r",
											"    pm.expect(response.title).to.contains(\"claimset\");    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Claim set does not exists\",\r\n    \"originalid\": {{NotExistClaimSetId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/copy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"copy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"\r",
											"    const indexOfClaimSet = results.map(\r",
											"        function(claimSet) { return claimSet.id; }\r",
											"    ).indexOf(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"\r",
											"    const result = results[indexOfClaimSet];\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"});\r",
											"\r",
											"const GetClaimSetsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"_isSystemReserved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"_applications\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"_isSystemReserved\",\r",
											"        \"_applications\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSetsId: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSetsId: Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(claimSetId);\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === \"educationStandards\")\r",
											"    pm.expect(educationStandardsResourceClaim).to.be.an(\"object\", \"The educationStandards resource claim was not found.\")\r",
											"    const academicSubjectDescriptorResourceClaim = result.resourceClaims.find(r => r.name === \"academicSubjectDescriptor\")\r",
											"    pm.expect(academicSubjectDescriptorResourceClaim).to.be.an(\"object\", \"The academicSubjectDescriptor resource claim was not found.\")\r",
											"});\r",
											"\r",
											"const GetClaimSetsIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"read\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"create\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"update\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"delete\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"_defaultAuthStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"authStrategyId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"authStrategyName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"displayName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"isInheritedFromParent\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"authStrategyId\",\r",
											"                    \"authStrategyName\",\r",
											"                    \"displayName\",\r",
											"                    \"isInheritedFromParent\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"read\",\r",
											"            \"create\",\r",
											"            \"update\",\r",
											"            \"delete\",\r",
											"            \"_defaultAuthStrategiesForCRUD\",\r",
											"            \"authStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSetId: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets: Response result includes updated claimset\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Updated Test ClaimSet\");\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationStandardsResourceClaim = result.resourceClaims.find(r => r.name === \"educationStandards\")\r",
											"    pm.expect(educationStandardsResourceClaim).to.be.an(\"object\", \"The educationStandards resource claim was not found.\")\r",
											"    const academicSubjectDescriptorResourceClaim = result.resourceClaims.any(r => r.name === \"academicSubjectDescriptor\")\r",
											"    pm.expect(academicSubjectDescriptorResourceClaim).to.equal(false);\r",
											"});\r",
											"\r",
											"const PutClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"read\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"create\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"update\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"delete\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"_defaultAuthStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"authStrategyId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"authStrategyName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"displayName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"isInheritedFromParent\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"authStrategyId\",\r",
											"                    \"authStrategyName\",\r",
											"                    \"displayName\",\r",
											"                    \"isInheritedFromParent\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"null\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"read\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"create\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"update\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"delete\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    },\r",
											"                    \"_defaultAuthStrategiesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"object\",\r",
											"                          \"properties\": {\r",
											"                            \"authStrategyId\": {\r",
											"                              \"type\": \"integer\"\r",
											"                            },\r",
											"                            \"authStrategyName\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"displayName\": {\r",
											"                              \"type\": \"string\"\r",
											"                            },\r",
											"                            \"isInheritedFromParent\": {\r",
											"                              \"type\": \"boolean\"\r",
											"                            }\r",
											"                          },\r",
											"                          \"required\": [\r",
											"                            \"authStrategyId\",\r",
											"                            \"authStrategyName\",\r",
											"                            \"displayName\",\r",
											"                            \"isInheritedFromParent\"\r",
											"                          ]\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"authStrategyOverridesForCRUD\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        },\r",
											"                        {\r",
											"                          \"type\": \"null\"\r",
											"                        }\r",
											"                      ]\r",
											"                    },\r",
											"                    \"children\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": {}\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"name\",\r",
											"                    \"read\",\r",
											"                    \"create\",\r",
											"                    \"update\",\r",
											"                    \"delete\",\r",
											"                    \"_defaultAuthStrategiesForCRUD\",\r",
											"                    \"authStrategyOverridesForCRUD\",\r",
											"                    \"children\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"read\",\r",
											"            \"create\",\r",
											"            \"update\",\r",
											"            \"delete\",\r",
											"            \"_defaultAuthStrategiesForCRUD\",\r",
											"            \"authStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"PUT ClaimSets: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(PutClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Updated Test ClaimSet\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      }      \r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Json: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Resource Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Resource: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(2);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"    [\"not in the system\", \"learningStandard-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[1]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"ClaimSet-WithWrongResource\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards-123\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard-123\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Wrong Parent Child: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Wrong-Parent-Child-Relation\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Resource Duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const errors = pm.response.json().errors;\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Resource Duplication: Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'learningStandard'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Resource-Duplication\",\r\n    \"resourceClaims\": [\r\n      {\r\n        \"name\": \"educationStandards\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": false\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": [\r\n          {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          },\r\n\t\t  {\r\n            \"name\": \"learningStandard\",\r\n            \"read\": true,\r\n            \"create\": true,\r\n            \"update\": true,\r\n            \"delete\": true,\r\n            \"defaultAuthStrategiesForCRUD\": [\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              },\r\n              {\r\n                \"authStrategyName\": \"NamespaceBased\",\r\n                \"isInheritedFromParent\": true\r\n              }\r\n            ],\r\n            \"authStrategyOverridesForCRUD\": [\r\n              null,\r\n              null,\r\n              null,\r\n              null\r\n            ],\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"academicSubjectDescriptor\",\r\n        \"read\": true,\r\n        \"create\": true,\r\n        \"update\": true,\r\n        \"delete\": true,\r\n        \"defaultAuthStrategiesForCRUD\": [\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NoFurtherAuthorizationRequired\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          },\r\n          {\r\n            \"authStrategyName\": \"NamespaceBased\",\r\n            \"isInheritedFromParent\": true\r\n          }\r\n        ],\r\n        \"authStrategyOverridesForCRUD\": [\r\n          null,\r\n          null,\r\n          null,\r\n          null\r\n        ],\r\n        \"children\": []\r\n      }      \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimsets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{SystemReservedClaimSetId}},\r\n    \"name\": \"Update System Reserved ClaimSet\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE ClaimSets: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"claimset\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSets System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"SystemReservedClaimSetId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - With Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSets With Application: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"Cannot delete\", \"associated application\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"OtherApplicationId\");\r",
											"pm.collectionVariables.unset(\"OtherApplicationVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"  pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v2/applications/${pm.collectionVariables.get(\"OtherApplicationId\")}`,\r",
											"    method: 'PUT',\r",
											"    header: {\r",
											"        \"Content-Type\": \"application/json\",\r",
											"        \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"    },\r",
											"    body: {\r",
											"      mode: 'raw',\r",
											"      raw:JSON.stringify({\r",
											"        \"applicationName\": \"ClaimSet Test Vendor Application\",\r",
											"        \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"        \"claimSetName\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"        \"profileIds\": [],\r",
											"        \"educationOrganizationIds\": [ 255901 ],\r",
											"        \"odsInstanceId\": 1\r",
											"      }),\r",
											"    }\r",
											"  },  \r",
											"  function (appErr, appResonse) {\r",
											"    if(appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"    const appJson = appResonse.json();\r",
											"    if(!appJson.id) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{OtherExistingClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{OtherExistingClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSet NotFound: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSet NotFound: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},\r\n    \"name\": \"Edited-ClaimSet\",\r\n    \"resourceClaims\": []\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedClaimSetId\");\r",
											"pm.collectionVariables.unset(\"OtherExistingClaimSetId\");\r",
											"pm.collectionVariables.unset(\"ClaimSetGUID\");\r",
											"pm.collectionVariables.unset(\"OtherClaimSetGUID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Resourceclaims",
					"item": [
						{
							"name": "Resourceclaims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ResourceClaims: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET ResourceClaims: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"id\");",
											"    pm.expect(response[0]).to.have.property(\"name\");",
											"    pm.expect(response[0]).to.have.property(\"parentId\");",
											"    pm.expect(response[0]).to.have.property(\"parentName\");",
											"    pm.expect(response[0]).to.have.property(\"children\");",
											"});",
											"",
											"const GetResourceClaimsSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"parentId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"parentName\": {",
											"          \"type\": \"null\"",
											"        },",
											"        \"children\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"parentId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"parentName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"children\": {",
											"                  \"type\": \"array\",",
											"                  \"items\": {}",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"parentId\",",
											"                \"parentName\",",
											"                \"children\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"parentId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"parentName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"children\": {",
											"                  \"type\": \"array\",",
											"                  \"items\": {}",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"parentId\",",
											"                \"parentName\",",
											"                \"children\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"parentId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"parentName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"children\": {",
											"                  \"type\": \"array\",",
											"                  \"items\": {}",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"parentId\",",
											"                \"parentName\",",
											"                \"children\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"parentId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"parentName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"children\": {",
											"                  \"type\": \"array\",",
											"                  \"items\": {}",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"parentId\",",
											"                \"parentName\",",
											"                \"children\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"name\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"parentId\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"parentName\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"children\": {",
											"                  \"type\": \"array\",",
											"                  \"items\": {}",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"parentId\",",
											"                \"parentName\",",
											"                \"children\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"parentId\",",
											"        \"parentName\",",
											"        \"children\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET ResourceClaims: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetResourceClaimsSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/resourceclaims",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"resourceclaims"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resourceclaims by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ResourceClaimsId: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET ResourceClaimsId: Response matches success format\", function () {",
											"    pm.expect(response).to.have.property(\"id\");",
											"    pm.expect(response).to.have.property(\"name\");",
											"    pm.expect(response).to.have.property(\"parentId\");",
											"    pm.expect(response).to.have.property(\"parentName\");",
											"    pm.expect(response).to.have.property(\"children\");",
											"});",
											"",
											"const GetResourceClaimsIdSchema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"parentId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"parentName\": {",
											"      \"type\": \"null\"",
											"    },",
											"    \"children\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"parentId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"parentName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"children\": {",
											"              \"type\": \"array\",",
											"              \"items\": {}",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"parentId\",",
											"            \"parentName\",",
											"            \"children\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"parentId\",",
											"    \"parentName\",",
											"    \"children\"",
											"  ]",
											"}",
											"",
											"pm.test(\"GET ResourceClaimsId: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetResourceClaimsIdSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/resourceclaims/1",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"resourceclaims",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resourceclaims by ID Children",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ResourceClaimsId Children: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET ResourceClaimsId Children: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"id\");",
											"    pm.expect(response[0]).to.have.property(\"name\");",
											"    pm.expect(response[0]).to.have.property(\"parentId\");",
											"    pm.expect(response[0]).to.have.property(\"parentName\");",
											"    pm.expect(response[0]).to.have.property(\"children\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/resourceclaims/1/children",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"resourceclaims",
										"1",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resourceclaims Children - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Resourceclaim by Id Children NotFound: Status code is Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"GET Resourceclaim by Id Children NotFound: Response matches error format\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"GET Resourceclaim by Id Children NotFound: Response title is helpful and accurate\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response.title).to.contain(\"Not found\");",
											"    pm.expect(response.title).to.contain(\"resourceclaim\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/resourceclaims/000/children",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"resourceclaims",
										"000",
										"children"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resourceclaims -Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Resourceclaim NotFound: Status code is Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"GET Resourceclaim NotFound: Response matches error format\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"GET Resourceclaim NotFound: Response title is helpful and accurate\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response.title).to.contain(\"Not found\");",
											"    pm.expect(response.title).to.contain(\"resourceclaim\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/resourceclaims/00",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"resourceclaims",
										"00"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AuthStrategies",
					"item": [
						{
							"name": "Authstrategies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET AuthStrategies: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"GET AuthStrategies: Response matches success format\", function () {\r",
											"    pm.expect(response[0]).to.have.property(\"authStrategyId\");\r",
											"    pm.expect(response[0]).to.have.property(\"authStrategyName\");\r",
											"    pm.expect(response[0]).to.have.property(\"displayName\");\r",
											"});\r",
											"\r",
											"const GetAuthStrategiesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"authStrategyId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"authStrategyName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"displayName\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"authStrategyId\",\r",
											"        \"authStrategyName\",\r",
											"        \"displayName\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET AuthStrategies: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetAuthStrategiesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/authstrategies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"authstrategies"
									]
								}
							},
							"response": []
						}
					]
				},				
				{
					"name": "Profiles",
					"item": [
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"CreatedProfileId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0].toLowerCase()).to.contain(\"'name' must not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid definition xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"test\");\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"readcontenttype\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><test/></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles - Name mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"match with test-profile-123\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile-123\",\r\n    \"Definition\": \"<Profile name=\\\"Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/"
							},
							"response": []
						},
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profiles: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profiles: Response result includes profiles\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetProfilesSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Profile: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfilesSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/Profiles/?{{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"Profiles",
										""
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Profile by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ProfileById: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ProfileById: Response result matches profile\", function () {\r",
											"    const result = pm.response.json();\r",
											"    pm.expect(result.name).to.equal(`Test-Profile`);\r",
											"    pm.expect(result.definition).to.not.be.empty;   \r",
											"});\r",
											"\r",
											"const GetProfileIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"definition\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test(\"GET ProfileById: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetProfileIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profile by ID - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profile NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"profile\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistProfileId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{NotExistProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Profiles: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/profiles/${pm.collectionVariables.get(\"CreatedProfileId\")}`,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"      \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"  }\r",
											"},\r",
											"function (profileErr, profileResponse) {\r",
											"  if(profileErr) \r",
											"  { \r",
											"    console.log(\"Error :\", profileErr); \r",
											"  } \r",
											"  const updatedProfileJson = profileResponse.json();\r",
											"  pm.test(\"PUT Profiles: Response includes updated profile\", function () {\r",
											"    pm.expect(updatedProfileJson.name).to.equal(\"Updated-Test-Profile\");\r",
											"    pm.expect(updatedProfileJson.definition).to.not.be.empty;\r",
											"   });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Updated-Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profile NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"profile\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistProfileId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Not-Found\",\r\n    \"Definition\": \"<Profile name=\\\"Not-Found\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/profiles/{{NotExistProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0].toLowerCase()).to.contain(\"'name' must not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Test-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Invalid definition xml",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"test\");\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"readcontenttype\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Updated-Test-Profile\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Test-Profile\\\"><Resource name=\\\"School\\\"><test/></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Name mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Profiles Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Profiles Invalid: Response errors include messages with wrong element name\", function () {\r",
											"    pm.expect(response.errors[\"Definition\"][0].toLowerCase()).to.contain(\"match with test-profile-123\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test-Profile-123\",\r\n    \"Definition\": \"<Profile name=\\\"Updated-Profile\\\"><Resource name=\\\"School\\\"><ReadContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"City\\\" /><Property name=\\\"StateAbbreviationType\\\" /><Property name=\\\"PostalCode\\\" /></Collection></ReadContentType><WriteContentType memberSelection=\\\"IncludeOnly\\\"><Collection name=\\\"EducationOrganizationAddresses\\\" memberSelection=\\\"IncludeOnly\\\"><Property name=\\\"Latitude\\\" /><Property name=\\\"Longitude\\\" /></Collection></WriteContentType></Resource></Profile>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/Profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Profile: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{CreatedProfileId}}"
							},
							"response": []
						},
						{
							"name": "Profiles - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Profile NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Profile NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"profile\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistProfileId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{API_URL}}/v2/profiles/{{NotExistProfileId}}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function randomIntFromInterval(min, max) { // min and max included ",
									"  return Math.floor(Math.random() * (max - min + 1) + min)",
									"}",
									"",
									"const rndInt = randomIntFromInterval(450, 783)",
									"pm.collectionVariables.set(\"NotExistProfileId\", pm.variables.replaceIn(rndInt));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Actions",
					"item": [
						{
							"name": "Authstrategies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Actions: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Actions: Response matches success format\", function () {\r",
											"    pm.expect(response[0]).to.have.property(\"id\");\r",
											"    pm.expect(response[0]).to.have.property(\"name\");\r",
											"    pm.expect(response[0]).to.have.property(\"uri\");\r",
											"});\r",
											"\r",
											"const GetActionsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"uri\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"uri\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Actions: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetActionsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/actions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"actions"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v1",
			"item": [
				{
					"name": "OdsInstances",
					"item": [
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstances: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstances: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"odsInstanceId\");",
											"    pm.expect(response[0]).to.have.property(\"name\");",
											"    pm.expect(response[0]).to.have.property(\"instanceType\");",
											"});",
											"",
											"const GetOdsInstancesSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"odsInstanceId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"instanceType\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"odsInstanceId\",",
											"        \"name\",",
											"        \"instanceType\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstances: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstances NotFound: Status code is Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"GET OdsInstances NotFound: Response matches error format\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"GET OdsInstances NotFound: Response title is helpful and accurate\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response.title).to.contain(\"Not found\");",
											"    pm.expect(response.title).to.contain(\"odsinstance\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances/0",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstancesID: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstancesID: Response matches success format\", function () {",
											"    pm.expect(response).to.have.property(\"odsInstanceId\");",
											"    pm.expect(response).to.have.property(\"name\");",
											"    pm.expect(response).to.have.property(\"instanceType\");",
											"});",
											"",
											"const GetOdsInstancesIdSchema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"odsInstanceId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"instanceType\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"odsInstanceId\",",
											"    \"name\",",
											"    \"instanceType\"",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstancesID: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesIdSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances/{{ODSInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances",
										"{{ODSInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstancesIDApplication: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstancesIDApplication: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"id\");",
											"    pm.expect(response[0]).to.have.property(\"applicationName\");",
											"    pm.expect(response[0]).to.have.property(\"claimSetName\");",
											"    pm.expect(response[0]).to.have.property(\"educationOrganizationIds\");",
											"    pm.expect(response[0]).to.have.property(\"vendorId\");",
											"    pm.expect(response[0]).to.have.property(\"profileIds\");",
											"    pm.expect(response[0]).to.have.property(\"odsInstanceId\");",
											"});",
											"",
											"const GetOdsInstancesIdApplication = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"applicationName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"claimSetName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"educationOrganizationIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"odsInstanceName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"vendorId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"profileIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"odsInstanceId\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"applicationName\",",
											"        \"claimSetName\",",
											"        \"educationOrganizationIds\",",
											"        \"vendorId\",",
											"        \"profileIds\",",
											"        \"odsInstanceId\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstancesIdApplication: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesIdApplication);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v1/odsinstances/{{ODSInstanceId}}/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v1",
										"odsinstances",
										"{{ODSInstanceId}}",
										"applications"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.request.auth && pm.request.auth.type === \"noauth\") {",
					"    return;",
					"}",
					"",
					"let currentToken = pm.collectionVariables.get(\"TOKEN\");",
					"if(currentToken) {",
					"    return;",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: pm.variables.get(\"RegisteredClientId\")},",
					"            {key: 'client_secret', value: pm.variables.get(\"RegisteredClientSecret\")},",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "NotExistClaimSetId",
			"value": ""
		},
		{
			"key": "OtherApplicationVendorId",
			"value": ""
		},
		{
			"key": "OtherApplicationId",
			"value": ""
		},
		{
			"key": "ClaimSetGUID",
			"value": ""
		},
		{
			"key": "CreatedClaimSetId",
			"value": ""
		},
		{
			"key": "OtherClaimSetGUID",
			"value": ""
		},
		{
			"key": "OtherExistingClaimSetId",
			"value": ""
		},
		{
			"key": "RegisteredClientId",
			"value": ""
		},
		{
			"key": "RegisteredClientSecret",
			"value": ""
		},
		{
			"key": "ApplicationVendorId",
			"value": ""
		},
		{
			"key": "CreatedApplicationId",
			"value": ""
		}
	]
}