{
	"info": {
		"_postman_id": "28ac83c0-a342-484e-9941-922fc7205e3d",
		"name": "Admin API E2E 2.0 - User Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42536960",
		"_collection_link": "https://test33-6887.postman.co/workspace/AdminApi1182~87697d41-7b5a-4e20-baad-4161b31b430e/collection/42536960-28ac83c0-a342-484e-9941-922fc7205e3d?action=share&source=collection_link&creator=42536960"
	},
	"item": [
		{
			"name": "Landing",
			"item": [
				{
					"name": "Landing Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET Landing: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"GET Landing: Response includes expected properties\", function () {\r",
									"    pm.expect(response).to.have.property(\"version\");\r",
									"    pm.expect(response).to.have.property(\"build\");\r",
									"});\r",
									"\r",
									"const GetSchemaLanding =  {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"version\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"build\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"version\",\r",
									"    \"build\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"GET Landing: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(GetSchemaLanding);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}",
							"host": [
								"{{API_URL}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"POST Register: Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"client\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"registered\");\r",
									"});\r",
									"\r",
									"const PostRegisterSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"status\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Register: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostRegisterSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateClientSecret() {\r",
									"    const minLength = 32;\r",
									"    const maxLength = 128;\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';\r",
									"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"\r",
									"    result += randomChar('abcdefghijklmnopqrstuvwxyz');\r",
									"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\r",
									"    result += randomChar('0123456789');\r",
									"    result += randomChar(specialCharacters);\r",
									"\r",
									"    for (let i = result.length; i < length; i++) {\r",
									"        const charactersPlusSpecial = characters + specialCharacters;\r",
									"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));\r",
									"    }\r",
									"\r",
									"    return shuffleString(result);\r",
									"}\r",
									"\r",
									"function randomChar(str) {\r",
									"    return str.charAt(Math.floor(Math.random() * str.length));\r",
									"}\r",
									"\r",
									"function shuffleString(str) {\r",
									"    const array = str.split('');\r",
									"    for (let i = array.length - 1; i > 0; i--) {\r",
									"        const j = Math.floor(Math.random() * (i + 1));\r",
									"        [array[i], array[j]] = [array[j], array[i]];\r",
									"    }\r",
									"    return array.join('');\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"RegisteredClientId\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.collectionVariables.set(\"RegisteredClientSecret\", generateClientSecret());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "Postman Test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register Invalid: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Register Invalid: Response matches error format\", function () {\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Invalid: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Invalid: Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors[\"ClientId\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"ClientSecret\"].length).to.equal(1);\r",
									"    pm.expect(response.errors[\"DisplayName\"].length).to.equal(1);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register Already Exists: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response matches error format\", function () {\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response errors include messages by property\", function () {\r",
									"    pm.expect(response.errors.ClientId.length).to.equal(1);\r",
									"    pm.expect(response.errors.ClientId[0]).to.contain(\"already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "{{UserName}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Invalid ClientSecret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register Already Exists: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response matches error format\", function () {\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"    pm.expect(response).to.have.property(\"errors\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Already Exists: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register Invalid ClientSecret: Response errors include message\", function () {\r",
									"    pm.expect(response.errors.ClientSecret.length).to.equal(1);\r",
									"    pm.expect(response.errors.ClientSecret[0]).to.contain(\"must contain at least one lowercase letter, one uppercase letter, one number, and one special character, and must be 32 to 128 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"InvalidClientSecret\", 'invalidvalue');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{InvalidClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "Test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token: Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"const PostTokenSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"access_token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"token_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"expires_in\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"access_token\",\r",
									"    \"token_type\",\r",
									"    \"expires_in\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Token: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostTokenSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Invalid: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Invalid: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid Grant Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Invalid Grant Type: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Invalid Grant Type: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"Access Denied. Please review your information and try again.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Invalid Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Invalid Scope: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Invalid Scope: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");    \r",
									"    pm.expect(response).to.have.property(\"error\", \"invalid_scope\");\r",
									"    pm.expect(response).to.have.property(\"error_description\", \"The request is missing required scope claims or has invalid scope values\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "NOT_REAL/SCOPE",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Incorrect Secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token Incorrect Secret: Status code is Bad Request\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"POST Token Incorrect Secret: Response includes error message\", function () {\r",
									"    pm.expect(response).to.have.property(\"error\");\r",
									"    pm.expect(response).to.have.property(\"error_description\");\r",
									"    pm.expect(response[\"error_description\"]).to.contain(\"Access Denied. Please review your information and try again.\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"RegisteredClientId\");\r",
									"pm.collectionVariables.unset(\"RegisteredClientSecret\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{$guid}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "InvalidClientSecret",
			"value": ""
		}
	]
}