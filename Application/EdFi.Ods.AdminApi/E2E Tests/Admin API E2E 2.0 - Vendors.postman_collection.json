{
	"info": {
		"_postman_id": "c2f46729-edb4-4105-8dff-e780d432f24f",
		"name": "Admin API E2E 2.0 - Vendors",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22794466"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "Vendors",
					"item": [
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Vendors: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"CreatedVendorId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Test Company\",\r\n    \"namespacePrefixes\": \"uri://ed-fi.org\",\r\n    \"contactName\": \"Test User\",\r\n    \"contactEmailAddress\": \"test@test-ed-fi.org\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									]
								}
							},
							"response": [
								{
									"name": "Vendor with multiple namespaces",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"company\": {{CompanyName}},\r\n    \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\r\n    \"contactName\": {{ContactName}},\r\n    \"contactEmailAddress\": {{ContactEmail}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{API_URL}}/vendors",
											"host": [
												"{{API_URL}}"
											],
											"path": [
												"vendors"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Thu, 02 Jun 2022 23:13:53 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										},
										{
											"key": "Location",
											"value": "/Vendors/2"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										}
									],
									"cookie": [],
									"body": "{\n    \"result\": {\n        \"vendorId\": 2,\n        \"company\": \"Test Company\",\n        \"namespacePrefixes\": \"uri://ed-fi.org,uri://academicbenchmarks.com\",\n        \"contactName\": \"Test User\",\n        \"contactEmailAddress\": \"test@test-ed-fi.org\"\n    },\n    \"status\": 201,\n    \"title\": \"Vendor created successfully\"\n}"
								}
							]
						},
						{
							"name": "Vendors - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Vendors Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"\",\r\n    \"namespacePrefixes\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									]
							},
							"response": []
						},
						{
							"name": "Vendors - Invalid Prefix exceed length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST Vendors Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST Vendors Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"NamespacePrefixes\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Test Company\",\r\n    \"namespacePrefixes\": \"uri://abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl.org\",\r\n    \"contactName\": \"Test User\",\r\n    \"contactEmailAddress\": \"test@test-ed-fi.org\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{API_URL}}/v2/vendors"
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendors: Response result includes vendors\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetVendorsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"company\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"namespacePrefixes\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactEmailAddress\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"company\",\r",
											"        \"namespacePrefixes\",\r",
											"        \"contactName\",\r",
											"        \"contactEmailAddress\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Without Offset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendors: Response result includes vendors\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetVendorsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"company\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"namespacePrefixes\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactEmailAddress\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"company\",\r",
											"        \"namespacePrefixes\",\r",
											"        \"contactName\",\r",
											"        \"contactEmailAddress\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors?limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Without Limit and Offset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendors: Response result includes vendors\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetVendorsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"company\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"namespacePrefixes\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactEmailAddress\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"company\",\r",
											"        \"namespacePrefixes\",\r",
											"        \"contactName\",\r",
											"        \"contactEmailAddress\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Without Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendors: Response result includes vendors\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetVendorsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"company\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"namespacePrefixes\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contactEmailAddress\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"company\",\r",
											"        \"namespacePrefixes\",\r",
											"        \"contactName\",\r",
											"        \"contactEmailAddress\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors?offset={{offset}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendor ID: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendor ID: Response result matches vendor\", function () {\r",
											"    const vendorId = parseInt(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"    \r",
											"    pm.expect(result.id).to.equal(vendorId);\r",
											"    pm.expect(result.company).to.equal(\"Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://ed-fi.org\");\r",
											"    pm.expect(result.contactName).to.equal(\"Test User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"test@test-ed-fi.org\");\r",
											"});\r",
											"\r",
											"const GetVendorIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"company\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"namespacePrefixes\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactEmailAddress\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"company\",\r",
											"    \"namespacePrefixes\",\r",
											"    \"contactName\",\r",
											"    \"contactEmailAddress\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET VendorsID: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors with Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors with Application: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET Vendors With Application: Response result includes application\", function () {\r",
											"    pm.expect(result[0].applicationName).to.equal(\"Other Vendor with Application\");\r",
											"    pm.expect(result[0].claimSetName).to.equal(\"Ed-Fi Sandbox\");\r",
											"    pm.expect(result[0].educationOrganizationIds.length).to.equal(1);\r",
											"    pm.expect(result[0].profileIds.length).to.equal(0);\r",
											"    pm.expect(result[0].odsInstanceIds.length).to.equal(1);\r",
											"});\r",
											"\r",
											"const GetVendorWithApplicationSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"applicationName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"claimSetName\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"educationOrganizationIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"integer\"\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"vendorId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"profileIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"odsInstanceIds\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"applicationName\",\r",
											"        \"claimSetName\",\r",
											"        \"educationOrganizationIds\",\r",
											"        \"vendorId\",\r",
											"        \"profileIds\",\r",
											"        \"odsInstanceIds\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET Vendors with Application: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetVendorWithApplicationSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {",
											"    \"Content-Type\": \"application/json\",",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`",
											"};",
											"",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
											"}",
											"",
											"pm.sendRequest({",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,",
											"  method: 'POST',",
											"  header: header,",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"company\": \"Other Company With Application\",",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",",
											"      \"contactName\": \"Other Company with Application User\",",
											"      \"contactEmailAddress\": \"otherapplicationwithcompany@example.com\"",
											"    }),",
											"  }",
											"},",
											"  function (vendorErr, vendorResponse) {",
											"    if (vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }",
											"    const id = vendorResponse.headers.get(\"Location\").split(\"/\")[2];",
											"    if (!id) { console.log('Error in Pre-request: vendorID missing from response. Response is:', vendorHeader); }",
											"    pm.collectionVariables.set(\"OtherApplicationVendorIdwithVendor\", id);",
											"",
											"    pm.sendRequest({",
											"      url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,",
											"      method: 'GET',",
											"      header: header",
											"    },",
											"      function (err, response) {",
											"        if (err) { console.log(\"Error in Pre-request:\", err); }",
											"        const json = response.json();",
											"        if (!json[0].id) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }",
											"        else {",
											"          pm.collectionVariables.set(\"ODSInstanceId\", json[0].id);",
											"        }",
											"        pm.sendRequest({",
											"          url: `${pm.variables.get(\"API_URL\")}/v2/applications`,",
											"          method: 'POST',",
											"          header: header,",
											"          body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"              \"applicationName\": \"Other Vendor with Application\",",
											"              \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorIdwithVendor\"),",
											"              \"claimSetName\": \"Ed-Fi Sandbox\",",
											"              \"profileIds\": [],",
											"              \"educationOrganizationIds\": [983438],",
											"              \"odsInstanceIds\": [pm.collectionVariables.get(\"ODSInstanceId\")]",
											"            }),",
											"          }",
											"        },",
											"          function (appErr, appResonse) {",
											"            if (appErr) { console.log(\"Error in Pre-request:\", appErr); }",
											"            const appJson = appResonse.json();",
											"            if (!appJson.id) { console.log('Error in Pre-request: applicationId missing from response. Response is:', appJson); }",
											"            else {",
											"              pm.collectionVariables.set(\"OtherApplicationId\", appJson.id);",
											"            }",
											"          });",
											"      });",
											"",
											"  });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{OtherApplicationVendorIdwithVendor}}/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{OtherApplicationVendorIdwithVendor}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors/${pm.collectionVariables.get(\"CreatedVendorId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (profileErr, profileResponse) {\r",
											"  if(profileErr) \r",
											"  { \r",
											"    console.log(\"Error :\", profileErr); \r",
											"  } \r",
											"  const result = profileResponse.json();\r",
											"  pm.test(\"PUT Profiles: Response includes updated profile\", function () {\r",
											"    pm.expect(result.company).to.equal(\"Updated Test Company\");\r",
											"    pm.expect(result.namespacePrefixes).to.equal(\"uri://academicbenchmarks.com\");\r",
											"    pm.expect(result.contactName).to.equal(\"Updated User\");\r",
											"    pm.expect(result.contactEmailAddress).to.equal(\"updated@example.com\");\r",
											"   });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Vendors Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT Vendors Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Company\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactName\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ContactEmailAddress\"].length).to.equal(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"\",\r\n    \"contactName\": \"\",\r\n    \"contactEmailAddress\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE Vendors: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE Vendors: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE Vendors: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"vendor\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteVendorSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE Vendors: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteVendorSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors -  Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors with Invalid Application - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(\"0\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/0/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"0",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"company\": \"Updated Test Company\",\r\n    \"namespacePrefixes\": \"uri://academicbenchmarks.com\",\r\n    \"contactName\": \"Updated User\",\r\n    \"contactEmailAddress\": \"updated@example.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vendors - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL Vendors NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Vendors NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL Vendors NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"vendor\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedVendorId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/vendors/{{CreatedVendorId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"vendors",
										"{{CreatedVendorId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "OtherApplicationVendorIdwithVendor",
			"value": ""
		},
		{
			"key": "OtherApplicationId",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		}
	]
}