{
	"id": "dbcd108a-4fc9-4266-9277-489c5c245e14",
	"name": "Admin API Docker",
	"values": [
		{
			"key": "API_URL",
			"value": "https://localhost/adminapi",
			"type": "default",
			"enabled": true
		},
		{
			"key": "offset",
			"value": "0",
			"type": "default",
			"enabled": true
		},
		{
			"key": "limit",
			"value": "100",
			"type": "default",
			"enabled": true
		},
		{
			"key": "connectionString",
			"value": "Data Source=db-admin;Initial Catalog=EdFi_Admin;User Id=edfi;Password=P@55w0rd;Encrypt=false;TrustServerCertificate=true",
			"type": "default",
			"enabled": true
		},
		{
			"key": "isMultitenant",
			"value": "true",
			"type": "default",
			"enabled": true
		},
		{
			"key": "tenant1",
			"value": "Tenant1",
			"type": "default",
			"enabled": true
		},
		{
			"key": "tenant2",
			"value": "Tenant2",
			"type": "default",
			"enabled": true
		},
		{
            "key": "sortByProperty",
            "value": "function sortByProperty(objArray, prop, direction){ if (arguments.length<2) throw new Error(\"ARRAY, AND OBJECT PROPERTY MINIMUM ARGUMENTS, OPTIONAL DIRECTION\"); if (!Array.isArray(objArray)) throw new Error(\"FIRST ARGUMENT NOT AN ARRAY\"); const clone = objArray.slice(0); const direct = arguments.length>2 ? arguments[2] : 1; const propPath = (prop.constructor===Array) ? prop : prop.split(\".\"); clone.sort(function(a,b){ for (let p in propPath){ if (a[propPath[p]] && b[propPath[p]]){ a = a[propPath[p]]; b = b[propPath[p]]; } } a = a.match(/^\\d+$/) ? +a : a; b = b.match(/^\\d+$/) ? +b : b; return ( (a < b) ? -1*direct : ((a > b) ? 1*direct : 0) ); }); return clone; }",
            "type": "default",
            "enabled": true
        },
        {
			"key": "jsHelper",
			"value": "(function () { const rndChar = function (str) { return str.charAt(Math.floor(Math.random() * str.length)); }; const shfChar = function (str) { const array = str.split(''); for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [array[i], array[j]] = [array[j], array[i]]; } return array.join(''); }; return { generateClientSecret: function(){ const minLength = 32; const maxLength = 128; let result = ''; const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~'; const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength; result += rndChar('abcdefghijklmnopqrstuvwxyz'); result += rndChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ'); result += rndChar('0123456789'); result += rndChar(specialCharacters); for (let i = result.length; i < length; i++) { const charactersPlusSpecial = characters + specialCharacters; result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length)); } return shfChar(result); }, randomChar : rndChar, shuffleString: shfChar } })",
			"type": "default",
			"enabled": true
		}
	],
	"_postman_variable_scope": "environment",
	"_postman_exported_at": "2023-08-11T19:57:02.536Z",
	"_postman_exported_using": "Postman/10.17.0"
}
