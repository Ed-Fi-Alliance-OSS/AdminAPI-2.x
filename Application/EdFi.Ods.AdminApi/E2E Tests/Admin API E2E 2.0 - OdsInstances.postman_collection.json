{
	"info": {
		"_postman_id": "44f88975-fd52-41b3-b16e-291f1dd218d1",
		"name": "Admin API E2E 2.0 - OdsInstances",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "OdsInstances",
					"item": [
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OdsInstanceGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OdsInstances: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"CreatedOdsInstanceId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test-OdsInstance-{{OdsInstanceGUID}}\",\r\n    \"instanceType\": \"postgresql\",\r\n    \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OdsInstances Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"    pm.expect(response.errors[\"ConnectionString\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid: Response errors include messages with wrong elements\", function () {\r",
											"    pm.expect(response.errors[\"Name\"][0]).to.contain(\"'Name' must not be empty\");\r",
											"    pm.expect(response.errors[\"ConnectionString\"][0]).to.contain(\"'Connection String' must not be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"instanceType\": \"\",\r\n    \"connectionString\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid Existing Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherOdsInstanceGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Ods Instance ${pm.collectionVariables.get(\"OtherOdsInstanceGUID\")}`,\r",
											"      \"instanceType\": \"Other Ods Instance Type\",\r",
											"      \"connectionString\": `${pm.environment.get(\"connectionString\")}`\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (error, response) {\r",
											"  if(error) { console.log(\"Error in Pre-request:\", error); }\r",
											"  const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"  pm.collectionVariables.set(\"OtherExistingOdsInstanceId\", id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OdsInstance Invalid Existing OdsInstance: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OdsInstance Invalid Existing OdsInstance: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstance Invalid Existing OdsInstance: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstance Invalid Existing OdsInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Ods Instance {{OtherOdsInstanceGUID}}\",\r\n    \"instanceType\": \"Other Ods Instance Type\",\r\n    \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid Connection String",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OdsInstances Invalid ConnectionString: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid ConnectionString: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid ConnectionString: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid ConnectionString: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ConnectionString\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"POST OdsInstances Invalid ConnectionString: Response errors include messages with wrong elements\", function () {\r",
											"    pm.expect(response.errors[\"ConnectionString\"][0]).to.contain(\"is not valid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test Connection String\",\r\n    \"instanceType\": \"Postgresql\",\r\n    \"connectionString\": \"WrongConnection\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstances: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstances: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"id\");",
											"    pm.expect(response[0]).to.have.property(\"name\");",
											"    pm.expect(response[0]).to.have.property(\"instanceType\");",
											"});",
											"",
											"const GetOdsInstancesSchema = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"instanceType\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"name\",",
											"        \"instanceType\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstances: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstances NotFound: Status code is Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"GET OdsInstances NotFound: Response matches error format\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property(\"title\");",
											"});",
											"",
											"pm.test(\"GET OdsInstances NotFound: Response title is helpful and accurate\", function () {",
											"    const response = pm.response.json();",
											"",
											"    pm.expect(response.title).to.contain(\"Not found\");",
											"    pm.expect(response.title).to.contain(\"odsInstance\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/0",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstancesID: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstancesID: Response matches success format\", function () {",
											"    pm.expect(response).to.have.property(\"id\");",
											"    pm.expect(response).to.have.property(\"name\");",
											"    pm.expect(response).to.have.property(\"instanceType\");",
											"    pm.expect(response).to.have.property(\"odsInstanceContexts\");",
											"    pm.expect(response).to.have.property(\"odsInstanceDerivatives\");",
											"});",
											"",
											"const GetOdsInstancesIdSchema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"instanceType\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"odsInstanceContexts\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"    },",
											"    \"odsInstanceDerivatives\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"name\",",
											"    \"instanceType\",",
											"    \"odsInstanceContexts\",",
											"    \"odsInstanceDerivatives\"",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstancesID: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesIdSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances by ID Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstancesIDApplication: Status code is OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"GET OdsInstancesIDApplication: Response matches success format\", function () {",
											"    pm.expect(response[0]).to.have.property(\"id\");",
											"    pm.expect(response[0]).to.have.property(\"applicationName\");",
											"    pm.expect(response[0]).to.have.property(\"claimSetName\");",
											"    pm.expect(response[0]).to.have.property(\"educationOrganizationIds\");",
											"    pm.expect(response[0]).to.have.property(\"vendorId\");",
											"    pm.expect(response[0]).to.have.property(\"profileIds\");",
											"    pm.expect(response[0]).to.have.property(\"odsInstanceIds\");",
											"});",
											"",
											"const GetOdsInstancesIdApplication = {",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"applicationName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"claimSetName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"educationOrganizationIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"vendorId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"profileIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        },",
											"        \"odsInstanceIds\": {",
											"          \"type\": \"array\",",
											"          \"items\": {}",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"applicationName\",",
											"        \"claimSetName\",",
											"        \"educationOrganizationIds\",",
											"        \"vendorId\",",
											"        \"profileIds\",",
											"        \"odsInstanceIds\"",
											"      ]",
											"    }",
											"  ]",
											"}",
											"",
											"pm.test(\"GET OdsInstancesIdApplication: Validation Schema Response\", () => {",
											"    pm.response.to.have.jsonSchema(GetOdsInstancesIdApplication);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const json = response.json();\r",
											"  if(!json[0].id) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }\r",
											"  else {\r",
											"    pm.collectionVariables.set(\"ODSInstanceId\", json[0].id);\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{ODSInstanceId}}/applications",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{ODSInstanceId}}",
										"applications"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstance: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances/${pm.collectionVariables.get(\"CreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const updatedOdsInstanceJson = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT OdsInstance: Response includes updated odsInstance\", function () {\r",
											"    pm.expect(updatedOdsInstanceJson.name).to.equal(`Updated-Test-OdsInstance-${pm.collectionVariables.get(\"OdsInstanceGUID\")}`);\r",
											"    pm.expect(updatedOdsInstanceJson.instanceType).to.not.be.empty;\r",
											"   });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated-Test-OdsInstance-{{OdsInstanceGUID}}\",\r\n    \"instanceType\": \"Updated-Test-OdsInstanceType\",\r\n    \"connectionString\": \"{{connectionString}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Empty Connection String",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstance connectionString empty: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances/${pm.collectionVariables.get(\"CreatedOdsInstanceId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (odsInstanceErr, odsInstanceResponse) {\r",
											"  if(odsInstanceErr) \r",
											"  { \r",
											"    console.log(\"Error :\", odsInstanceErr); \r",
											"  } \r",
											"  const updatedOdsInstanceJson = odsInstanceResponse.json();\r",
											"  pm.test(\"PUT OdsInstance connectionString empty: Response includes updated odsInstance\", function () {\r",
											"    pm.expect(updatedOdsInstanceJson.name).to.equal(`Updated-Test-OdsInstance-${pm.collectionVariables.get(\"OdsInstanceGUID\")}-Empty`);\r",
											"    pm.expect(updatedOdsInstanceJson.instanceType).to.not.be.empty;\r",
											"   });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated-Test-OdsInstance-{{OdsInstanceGUID}}-Empty\",\r\n    \"instanceType\": \"Updated-Test-OdsInstanceType\",\r\n    \"connectionString\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid Connection String",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstances Invalid ConnectionString: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT OdsInstances Invalid ConnectionString: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstances Invalid ConnectionString: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstances Invalid ConnectionString: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"ConnectionString\"].length).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstances Invalid ConnectionString: Response errors include messages with wrong elements\", function () {\r",
											"    pm.expect(response.errors[\"ConnectionString\"][0]).to.contain(\"is not valid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Ods Instance {{OtherOdsInstanceGUID}}\",\r\n    \"instanceType\": \"Other Ods Instance Type\",\r\n    \"connectionString\": \"WrongConnectionString\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Invalid Existing Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstance Invalid Existing OdsInstance: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT OdsInstance Invalid Existing OdsInstance: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstance Invalid Existing OdsInstance: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstance Invalid Existing OdsInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Ods Instance {{OtherOdsInstanceGUID}}\",\r\n    \"instanceType\": \"Other Ods Instance Type\",\r\n    \"connectionString\": \"{{connectionString}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomIntFromInterval(min, max) { // min and max included \r",
											"  return Math.floor(Math.random() * (max - min + 1) + min)\r",
											"}\r",
											"\r",
											"const rndInt = randomIntFromInterval(99990, 99999)\r",
											"pm.collectionVariables.set(\"NotExistOdsInstanceId\", pm.variables.replaceIn(rndInt));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstance NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstance NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstance NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstance\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistOdsInstanceId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated-Test-OdsInstance\",\r\n    \"instanceType\": \"Updated-Test-OdsInstanceType\",\r\n    \"connectionString\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{NotExistOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{NotExistOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstances: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{CreatedOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{CreatedOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstance NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE OdsInstance NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE OdsInstance NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstance\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistOdsInstanceId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomIntFromInterval(min, max) { // min and max included \r",
											"  return Math.floor(Math.random() * (max - min + 1) + min)\r",
											"}\r",
											"\r",
											"const rndInt = randomIntFromInterval(99990, 99999)\r",
											"pm.collectionVariables.set(\"NotExistOdsInstanceId\", pm.variables.replaceIn(rndInt));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{NotExistOdsInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{NotExistOdsInstanceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstances - Applications associated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstance Applications associated: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE OdsInstance Applications associated: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE OdsInstance Applications associated: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE OdsInstance Applications associated: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Id[0]).to.contain(\"Can not be deleted\");\r",
											"    pm.expect(response.errors.Id[0]).to.contain(\"Applications\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/odsInstances/{{ODSInstanceId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"odsInstances",
										"{{ODSInstanceId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "NotExistOdsInstanceId",
			"value": ""
		},
		{
			"key": "OtherClaimSetGUID",
			"value": ""
		},
		{
			"key": "OtherExistingClaimSetId",
			"value": ""
		},
		{
			"key": "OtherOdsInstanceGUID",
			"value": ""
		},
		{
			"key": "OtherExistingOdsInstanceId",
			"value": ""
		},
		{
			"key": "OdsInstanceGUID",
			"value": ""
		},
		{
			"key": "CreatedOdsInstanceId",
			"value": ""
		}
	]
}