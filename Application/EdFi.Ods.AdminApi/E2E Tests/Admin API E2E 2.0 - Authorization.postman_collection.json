{
	"info": {
		"_postman_id": "c22b06cd-571a-43b7-a656-a5a75f005e39",
		"name": "Admin API E2E 2.0 - Authorization",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42536960"
	},
	"item": [
		{
			"name": "User Management Authorization Scopes",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Register: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const result = pm.response.json().result;\r",
									"\r",
									"pm.test(\"POST Register: Response matches success format\", function () {\r",
									"    pm.expect(response.status).to.equal(200);\r",
									"    pm.expect(response).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"POST Register: Response title is helpful and accurate\", function () {\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"client\");\r",
									"    pm.expect(response.title.toLowerCase()).to.contain(\"registered\");\r",
									"});\r",
									"\r",
									"const PostRegisterSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"status\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Register: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostRegisterSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}\r",
									"pm.collectionVariables.set(\"RegisteredClientId\", pm.variables.replaceIn('{{$guid}}'));\r",
									"pm.collectionVariables.set(\"RegisteredClientSecret\", pm.variables.replaceIn('TKN{{$guid}}'));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ClientId",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "ClientSecret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "DisplayName",
									"value": "Postman Test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/register",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Full - Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response != null ? pm.response.json() : null;\r",
									"pm.collectionVariables.set(\"FULL_ACCESS_TOKEN\", response?.access_token);\r",
									"\r",
									"pm.test(\"POST Token: Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"const PostTokenSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"access_token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"token_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"expires_in\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"access_token\",\r",
									"    \"token_type\",\r",
									"    \"expires_in\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Token: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostTokenSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/full_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "ClaimSets - Full Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const results = pm.response.json();\r",
									"\r",
									"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
									"    pm.expect(results.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"const GetClaimSetsSchema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"_isSystemReserved\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"_applications\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"_isSystemReserved\",\r",
									"        \"_applications\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{FULL_ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"v2",
								"claimSets"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Tenant Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.collectionVariables.set(\"TENANT_ACCESS_TOKEN\", response.access_token);\r",
									"\r",
									"pm.test(\"POST Token: Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"const PostTokenSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"access_token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"token_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"expires_in\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"access_token\",\r",
									"    \"token_type\",\r",
									"    \"expires_in\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Token: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostTokenSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/tenant_access",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "ClaimSets - Tenant Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET ClaimSets: Status code is 403 for Tenant Access\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TENANT_ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"v2",
								"claimSets"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Token - Worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Token: Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.collectionVariables.set(\"WORKER_PROCESS_TOKEN\", response.access_token);\r",
									"\r",
									"pm.test(\"POST Token: Response includes token\", function () {\r",
									"    pm.expect(response).to.have.property(\"access_token\");\r",
									"    pm.expect(response).to.have.property(\"token_type\");\r",
									"    pm.expect(response).to.have.property(\"expires_in\");\r",
									"\r",
									"    pm.expect(response[\"token_type\"]).to.equal(\"Bearer\");\r",
									"});\r",
									"\r",
									"const PostTokenSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"access_token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"token_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"expires_in\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"access_token\",\r",
									"    \"token_type\",\r",
									"    \"expires_in\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"POST Token: Validation Schema Response\", () => {\r",
									"    pm.response.to.have.jsonSchema(PostTokenSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{RegisteredClientId}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{RegisteredClientSecret}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "edfi_admin_api/worker",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{API_URL}}/connect/token",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "ClaimSets - Worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET ClaimSets: Status code is 403 for Worker Scope\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let header = {\r",
									"    'Content-Type': 'application/x-www-form-urlencoded'\r",
									"};\r",
									"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
									"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
									"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WORKER_PROCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"v2",
								"claimSets"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{offset}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.request.auth && pm.request.auth.type === \"noauth\") {",
					"    return;",
					"}",
					"",
					"let currentToken = pm.collectionVariables.get(\"TOKEN\");",
					"if(currentToken) {",
					"    return;",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: pm.variables.get(\"RegisteredClientId\")},",
					"            {key: 'client_secret', value: pm.variables.get(\"RegisteredClientSecret\")},",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "NotExistClaimSetId",
			"value": ""
		},
		{
			"key": "OtherApplicationVendorId",
			"value": ""
		},
		{
			"key": "OtherApplicationId",
			"value": ""
		},
		{
			"key": "ClaimSetGUID",
			"value": ""
		},
		{
			"key": "CreatedClaimSetId",
			"value": ""
		},
		{
			"key": "OtherClaimSetGUID",
			"value": ""
		},
		{
			"key": "OtherExistingClaimSetId",
			"value": ""
		},
		{
			"key": "RegisteredClientId",
			"value": ""
		},
		{
			"key": "RegisteredClientSecret",
			"value": ""
		},
		{
			"key": "ApplicationVendorId",
			"value": ""
		},
		{
			"key": "CreatedApplicationId",
			"value": ""
		},
		{
			"key": "FULL_ACCESS_TOKEN",
			"value": ""
		},
		{
			"key": "TENANT_ACCESS_TOKEN",
			"value": ""
		},
		{
			"key": "WORKER_PROCESS_TOKEN",
			"value": ""
		}
	]
}