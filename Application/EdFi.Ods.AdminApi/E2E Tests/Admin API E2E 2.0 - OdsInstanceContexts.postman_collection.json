{
	"info": {
		"_postman_id": "a413efdc-9dff-4c53-a375-41fae51d01a9",
		"name": "Admin API E2E 2.0 - OdsInstancesContexts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "OdsInstanceContexts",
					"item": [
						{
							"name": "OdsInstanceContexts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},  \r",
											"function (err, response) {\r",
											"  if(err) { console.log(\"Error in Pre-request:\", err); }\r",
											"  const json = response.json();\r",
											"  if(!json[0].id) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }\r",
											"  else {\r",
											"    pm.collectionVariables.set(\"ODSInstanceId\", json[0].id);\r",
											"  }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ODS Instance Contexts: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"CreatedOdsInstanceContextId\", id);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": {{ODSInstanceId}},\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ODS Instance Contexts Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": {{ODSInstanceId}},\r\n  \"contextKey\": \"\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Invalid ODS Instance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ODS Instance Contexts Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid ODSInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.OdsInstanceId.length).to.equal(1);\r",
											"    pm.expect(response.errors.OdsInstanceId[0]).to.contain(\"provide valid ods instance id.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": 0,\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Not Found ODS Instance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ODS Instance Contexts Invalid: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid: Response matches title property\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid ODSInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstance\");\r",
											"    pm.expect(response.title).to.contain(\"It may have been recently deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": 9000,\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Invalid Combined Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ODS Instance Contexts Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid: Response matches title property\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"POST ODS Instance Contexts Invalid ODSInstance: Response errors combined key validation\", function () {\r",
											"    pm.expect(response.title).to.contain(\"Validation failed\");\r",
											"    pm.expect(response.errors).to.be.an(\"object\").and.not.to.be.empty;\r",
											"    pm.expect(response.errors[\"\"]).to.be.an(\"array\").that.includes(\"The combined key ODS instance id and context key must be unique.\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": {{ODSInstanceId}},\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstanceContexts: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Response result includes OdsInstancesContext\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetOdsInstanceContextsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"contextKey\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contextValue\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"contextKey\",\r",
											"        \"contextValue\",\r",
											"        \"odsInstanceId\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetOdsInstanceContextsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Without Offset and Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstanceContexts: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Response result includes OdsInstancesContext\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetOdsInstanceContextsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"contextKey\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contextValue\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"contextKey\",\r",
											"        \"contextValue\",\r",
											"        \"odsInstanceId\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetOdsInstanceContextsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Without Offset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstanceContexts: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Response result includes OdsInstancesContext\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetOdsInstanceContextsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"contextKey\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contextValue\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"contextKey\",\r",
											"        \"contextValue\",\r",
											"        \"odsInstanceId\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetOdsInstanceContextsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/?limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Without Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstanceContexts: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Response result includes OdsInstancesContext\", function () {\r",
											"    const results = pm.response.json();\r",
											"    pm.expect(results.length).to.be.greaterThan(0);   \r",
											"});\r",
											"\r",
											"const GetOdsInstanceContextsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"contextKey\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contextValue\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"contextKey\",\r",
											"        \"contextValue\",\r",
											"        \"odsInstanceId\"     \r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetOdsInstanceContextsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/?offset={{offset}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										""
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstanceContextById: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContextId: Response result matches OdsInstancesContext\", function () {\r",
											"    const result = pm.response.json();\r",
											"    pm.expect(result.contextKey).to.not.be.empty;\r",
											"    pm.expect(result.contextValue).to.not.be.empty;\r",
											"    pm.expect(result.odsInstanceId).to.not.equal(0);\r",
											"});\r",
											"\r",
											"const GetOdsInstanceContextsSchema = {\r",
											"  \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"contextKey\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"contextValue\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"odsInstanceId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"contextKey\",\r",
											"        \"contextValue\",\r",
											"        \"odsInstanceId\"     \r",
											"      ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET OdsInstancesContext: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetOdsInstanceContextsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts by ID - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET OdsInstanceContexts NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET OdsInstanceContexts NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstanceContext\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistOdsInstancesContextId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{NotExistOdsInstancesContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{NotExistOdsInstancesContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstanceContexts: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/OdsInstanceContexts/${pm.collectionVariables.get(\"CreatedOdsInstanceContextId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (err, response) {\r",
											"  if(err) \r",
											"  { \r",
											"    console.log(\"Error :\", err); \r",
											"  } \r",
											"  const updatedJson = response.json();\r",
											"  pm.test(\"PUT OdsInstanceContexts: Response includes updated OdsInstanceContext\", function () {\r",
											"    pm.expect(updatedJson.contextKey).to.equal(\"ckey\");\r",
											"    pm.expect(updatedJson.contextValue).to.be.not.empty;\r",
											"    pm.expect(updatedJson.odsInstanceId).to.be.not.equal(0);\r",
											"   });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": {{ODSInstanceId}},\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstanceContexts NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstanceContext\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistOdsInstancesContextId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": {{ODSInstanceId}},\r\n  \"contextKey\": \"ckey3\",\r\n  \"contextValue\": \"cvalue3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{NotExistOdsInstancesContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{NotExistOdsInstancesContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstanceContexts Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": 0,\r\n  \"contextKey\": \"\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Invalid ODS Instance Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstanceContexts Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Invalid OdsInstanceId\", function () {\r",
											"   pm.expect(response.errors.OdsInstanceId[0]).to.contain(\"valid ods instance id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": 0,\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Not Found ODS Instance Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstanceContexts Invalid: Status code is not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"PUT ODS Instance Contexts Invalid ODSInstance: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstance\");\r",
											"    pm.expect(response.title).to.contain(\"It may have been recently deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": 9000,\r\n  \"contextKey\": \"ckey\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Invalid Combined Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/odsInstanceContexts/`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"odsInstanceId\": `${pm.collectionVariables.get(\"ODSInstanceId\")}`,\r",
											"      \"contextKey\": \"ckey2\",\r",
											"      \"contextValue\": \"cvalue2\"\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (error, response) {\r",
											"  if(error) { console.log(\"Error in Pre-request:\", error); }\r",
											"  const id = response.headers.get(\"Location\").split(\"/\")[2];\r",
											"  pm.collectionVariables.set(\"OtherOdsInstanceContextId\", id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT OdsInstanceContexts Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											" const response = pm.response.json();\r",
											" \r",
											"pm.test(\"PUT OdsInstanceContexts Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"PUT ODS Instance Contexts Invalid ODSInstance: Response errors combined key validation\", function () {\r",
											"     pm.expect(response.title).to.contain(\"Validation failed\");\r",
											"     pm.expect(response.errors).to.be.an(\"object\").and.not.to.be.empty;\r",
											"     pm.expect(response.errors[\"\"]).to.be.an(\"array\").that.includes(\"The combined key ODS instance id and context key must be unique.\");\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"odsInstanceId\": {{ODSInstanceId}},\r\n  \"contextKey\": \"ckey2\",\r\n  \"contextValue\": \"cvalue\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstanceContexts: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{CreatedOdsInstanceContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{CreatedOdsInstanceContextId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "OdsInstanceContexts - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE OdsInstanceContexts NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE OdsInstanceContexts NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE OdsInstanceContexts NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"odsInstanceContext\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"NotExistOdsInstancesContextId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/OdsInstanceContexts/{{NotExistOdsInstancesContextId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"OdsInstanceContexts",
										"{{NotExistOdsInstancesContextId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function randomIntFromInterval(min, max) { // min and max included ",
									"  return Math.floor(Math.random() * (max - min + 1) + min)",
									"}",
									"",
									"const rndInt = randomIntFromInterval(450, 783)",
									"pm.collectionVariables.set(\"NotExistProfileId\", pm.variables.replaceIn(rndInt));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "NotExistProfileId",
			"value": ""
		},
		{
			"key": "CreatedProfileId",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		},
		{
			"key": "CreatedOdsInstanceDerivativeId",
			"value": ""
		},
		{
			"key": "NotExistOdsInstancesDerivativeId",
			"value": "90"
		},
		{
			"key": "CreatedOdsInstanceContextId",
			"value": ""
		},
		{
			"key": "NotExistOdsInstancesContextId",
			"value": "786"
		},
		{
			"key": "OtherOdsInstanceContextId",
			"value": ""
		}
	]
}