{
	"info": {
		"_postman_id": "aa95140d-a83e-4e7f-a3f8-052341b2c007",
		"name": "Admin API E2E 2.0 - ClaimSets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v2",
			"item": [
				{
					"name": "ClaimSets",
					"item": [
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"ClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");\r",
											"    const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if(id)\r",
											"    {\r",
											"        pm.collectionVariables.set(\"CreatedClaimSetId\", id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test ClaimSet {{ClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Import",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"ImportClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets - Import: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Response includes location in header\", function () {\r",
											"    pm.response.to.have.header(\"Location\");   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaims\": [\r\n    {     \r\n      \"name\": \"educationStandards\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],      \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {     \r\n      \"name\": \"academicSubjectDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }  \r\n   \r\n      ],\r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {\r\n      \"name\": \"gradeLevelDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],\r\n     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {      \r\n      \"name\": \"publicationStatusDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    }\r\n  ],\r\n  \"name\": \"Test ClaimSet import {{ImportClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/import",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Import - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const id = claimSetResponse.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if(!id) { console.log('Error in Pre-request: claimset ID missing from response'); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets - Import: Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaims\": [\r\n    {     \r\n      \"name\": \"educationStandards\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],      \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {     \r\n      \"name\": \"academicSubjectDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }  \r\n   \r\n      ],\r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {\r\n      \"name\": \"gradeLevelDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],\r\n     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {      \r\n      \"name\": \"publicationStatusDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    }\r\n  ],\r\n  \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/import",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Import - Wrong resource name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"WrongNameClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets - Import: Wrong resouce name Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Wrong resouce name Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Wrong resouce name: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Wrong resouce name:  Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"not in the system\", \"educationStandards-123\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaims\": [\r\n    {     \r\n      \"name\": \"educationStandards-123\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],      \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {     \r\n      \"name\": \"academicSubjectDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }  \r\n   \r\n      ],\r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {\r\n      \"name\": \"gradeLevelDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],\r\n     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {      \r\n      \"name\": \"publicationStatusDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    }\r\n  ],\r\n  \"name\": \"Wrong Resouce name {{WrongNameClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/import",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Import - Invalid Wrong Parent Child Relationship",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"InvalidParentClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets - Import: Wrong relation: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Wrong relation: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Wrong relation: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Wrong relation:  Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Child resource: 'academicSubjectDescriptor'\", \"wrong parent resource\", \"parent resource is: 'systemDescriptors'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    });  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaims\": [\r\n    {     \r\n      \"name\": \"educationStandards\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],      \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": [\r\n           {\r\n            \"name\": \"academicSubjectDescriptor\",\r\n            \"actions\": [\r\n                {\r\n                \"name\": \"Create\",\r\n                \"enabled\": true\r\n                },\r\n                {\r\n                \"name\": \"Read\",\r\n                \"enabled\": true\r\n                },\r\n                {\r\n                \"name\": \"Update\",\r\n                \"enabled\": true\r\n                },\r\n                {\r\n                \"name\": \"Delete\",\r\n                \"enabled\": true\r\n                }  \r\n        \r\n            ],\r\n            \"authorizationStrategyOverridesForCRUD\": [],\r\n            \"children\": []\r\n            }\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"gradeLevelDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],\r\n     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {      \r\n      \"name\": \"publicationStatusDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    }\r\n  ],\r\n  \"name\": \"Wrong Relationship {{InvalidParentClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/import",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Import - Invalid Resource duplication",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"DuplicateClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets - Import: Resource duplication: name Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Resource duplication: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Resource duplication: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets - Import: Resource duplication:  Response errors include messages by property and resource\", function () {\r",
											"    pm.expect(response.errors.ResourceClaims.length).to.equal(1);\r",
											"    [\"Only unique resource claims\", \"duplicate resource: 'gradeLevelDescriptor'\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.ResourceClaims[0]).to.contain(substring);\r",
											"    }); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaims\": [\r\n    {     \r\n      \"name\": \"educationStandards\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],      \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {\r\n      \"name\": \"gradeLevelDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],\r\n     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {\r\n      \"name\": \"gradeLevelDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],\r\n     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    },\r\n    {\r\n      \"name\": \"publicationStatusDescriptor\",\r\n      \"actions\": [\r\n        {\r\n          \"name\": \"Create\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Read\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Update\",\r\n          \"enabled\": true\r\n        },\r\n        {\r\n          \"name\": \"Delete\",\r\n          \"enabled\": true\r\n        }\r\n      ],     \r\n      \"authorizationStrategyOverridesForCRUD\": [],\r\n      \"children\": []\r\n    }\r\n  ],\r\n  \"name\": \"Wrong Relationship {{DuplicateClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/import",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Json: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Json: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const id = claimSetResponse.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if(!id) { console.log('Error in Pre-request: claimset ID missing from response'); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"const GetClaimSetsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"_isSystemReserved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"_applications\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"_isSystemReserved\",\r",
											"        \"_applications\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}&limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										},
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Without Offset and Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"const GetClaimSetsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"_isSystemReserved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"_applications\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"_isSystemReserved\",\r",
											"        \"_applications\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Without Offset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"const GetClaimSetsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"_isSystemReserved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"_applications\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"_isSystemReserved\",\r",
											"        \"_applications\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets?limit={{limit}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Without Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const results = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSets: Response result includes claimsets\", function () {\r",
											"    pm.expect(results.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"const GetClaimSetsSchema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"name\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"_isSystemReserved\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"_applications\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"_isSystemReserved\",\r",
											"        \"_applications\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets?offset={{offset}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSetsId: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSetsId: Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    pm.expect(result.id).to.equal(parseInt(claimSetId));\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"});\r",
											"\r",
											"const GetClaimSetsIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"             \"actions\": {\r",
											"             \"type\": \"array\",\r",
											"             \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"enabled\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                } \r",
											"                } ]\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }                      \r",
											"\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"               \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"actions\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSetId: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Export",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"ClaimSets Export: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"ClaimSets Export: Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    pm.expect(result.id).to.equal(parseInt(claimSetId));\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"});\r",
											"\r",
											"const GetClaimSetsIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"             \"actions\": {\r",
											"             \"type\": \"array\",\r",
											"             \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"enabled\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                } \r",
											"                } ]\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }                      \r",
											"\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"               \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"actions\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"ClaimSets Export: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/export",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"create\",\r\n      \"enabled\": true\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets by ID after adding Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSetsId after adding Action: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSetsId after adding Action: Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(parseInt(claimSetId));\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const educationOrganizationsResourceClaim = result.resourceClaims.find(r => r.name === \"educationOrganizations\")\r",
											"    pm.expect(educationOrganizationsResourceClaim).to.be.an(\"object\", \"The educationOrganizations resource claim was not found.\")\r",
											"    const actionCreate = educationOrganizationsResourceClaim._defaultAuthorizationStrategiesForCRUD.find(r => r.actionName === \"Create\")\r",
											"    pm.expect(actionCreate).to.be.an(\"object\", \"The Create resource claim action was not found.\")\r",
											"});\r",
											"\r",
											"const GetClaimSetsIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"actions\": {\r",
											"             \"type\": \"array\",\r",
											"             \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"enabled\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                } \r",
											"                } ]\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }                      \r",
											"\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"               \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"actions\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSetId after adding Action: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaimActions.length).to.equal(2);\r",
											"    pm.expect(response.errors.ResourceClaimActions[0]).to.contain(\"which is not in the system\");\r",
											"    pm.expect(response.errors.ResourceClaimActions[1]).to.contain(\"have at least one action\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4000,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": false\r\n    },\r\n    {\r\n      \"name\": \"create\",\r\n      \"enabled\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add duplicate action Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaimActions.length).to.equal(2);\r",
											"    pm.expect(response.errors.ResourceClaimActions[0]).to.contain(\"which is not in the system\");\r",
											"    pm.expect(response.errors.ResourceClaimActions[1]).to.contain(\"action is duplicated\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4000,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": true\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Add Action System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResourceClaimAction System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResourceClaimAction System Reserved: Response errors include system reserved message\", function () {\r",
											"     pm.expect(response.errors.ClaimSetId.length).to.equal(1)\r",
											"    pm.expect(response.errors.ClaimSetId[0]).to.contain(\"system reserved\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": false\r\n    },\r\n    {\r\n      \"name\": \"create\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"update\",\r\n      \"enabled\": false\r\n    },\r\n    {\r\n      \"name\": \"delete\",\r\n      \"enabled\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}/resourceClaimActions",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}",
										"resourceClaimActions"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"create\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"update\",\r\n      \"enabled\": false\r\n    },\r\n    {\r\n      \"name\": \"delete\",\r\n      \"enabled\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction System Reserved: Response errors include system reserved message\", function () {\r",
											"     pm.expect(response.errors.ClaimSetId.length).to.equal(1)\r",
											"    pm.expect(response.errors.ClaimSetId[0]).to.contain(\"system reserved\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"create\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"update\",\r\n      \"enabled\": false\r\n    },\r\n    {\r\n      \"name\": \"delete\",\r\n      \"enabled\": false\r\n    }   \r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}",
										"resourceClaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Modify Action ClaimSet not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ResourceClaimAction Not Found: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction Not Found: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ResourceClaimAction Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"resourceClaimId\": 4,\r\n  \"resourceClaimActions\": [\r\n    {\r\n      \"name\": \"read\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"create\",\r\n      \"enabled\": true\r\n    },\r\n    {\r\n      \"name\": \"update\",\r\n      \"enabled\": false\r\n    },\r\n    {\r\n      \"name\": \"delete\",\r\n      \"enabled\": false\r\n    }   \r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/90000/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"90000",
										"resourceClaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"create\",\r\n  \"authorizationStrategies\": [\r\n    \"RelationshipsWithStudentsOnly\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4",
										"overrideAuthorizationStrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy Default Strategy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"create\",\r\n  \"authorizationStrategies\": [\r\n    \"RelationshipsWithStudentsOnly\", \"NoFurtherAuthorizationRequired\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4",
										"overrideAuthorizationStrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets by ID after overriding Authorization Strategy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSetsId after overriding Authorization Strategy: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const result = pm.response.json();\r",
											"\r",
											"pm.test(\"GET ClaimSetsId after overriding Authorization Strategy: Response result matches claimset\", function () {\r",
											"    const claimSetId = pm.collectionVariables.get(\"CreatedClaimSetId\");\r",
											"    \r",
											"    pm.expect(result.id).to.equal(parseInt(claimSetId));\r",
											"    pm.expect(result.name).to.equal(`Test ClaimSet ${pm.collectionVariables.get(\"ClaimSetGUID\")}`);\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"\r",
											"    const educationOrganizationsResourceClaim = result.resourceClaims.find(r => r.name === \"educationOrganizations\")\r",
											"    pm.expect(educationOrganizationsResourceClaim).to.be.an(\"object\", \"The educationOrganizations resource claim was not found.\")\r",
											"    pm.expect(educationOrganizationsResourceClaim.authorizationStrategyOverridesForCRUD).to.not.be.empty;\r",
											"    const overrideAuthCreate = educationOrganizationsResourceClaim.authorizationStrategyOverridesForCRUD.find(r => r.actionName === \"Create\")\r",
											"    pm.expect(overrideAuthCreate).to.be.an(\"object\", \"The Create authorization override was not found.\")\r",
											"    //validates that default wasn't added\r",
											"    pm.expect(overrideAuthCreate.authorizationStrategies.length).to.equal(1);\r",
											"    const relationshipsWithStudentsOnlyStrategy = overrideAuthCreate.authorizationStrategies.find(r => r.authStrategyName === \"RelationshipsWithStudentsOnly\")\r",
											"    pm.expect(relationshipsWithStudentsOnlyStrategy).to.be.an(\"object\", \"The RelationshipsWithStudentsOnly strategy name was not found.\")\r",
											"});\r",
											"\r",
											"const GetClaimSetsIdSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"resourceClaims\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"             \"actions\": {\r",
											"             \"type\": \"array\",\r",
											"             \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"name\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"enabled\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                } \r",
											"                } ]\r",
											"            },\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }                      \r",
											"\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"authorizationStrategyOverridesForCRUD\": {\r",
											"              \"type\": \"array\",\r",
											"               \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"actionId\": {\r",
											"                      \"type\": \"integer\"\r",
											"                    },\r",
											"                    \"actionName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"authorizationStrategies\": {\r",
											"                      \"type\": \"array\",\r",
											"                      \"items\": [\r",
											"                          {\r",
											"                            \"type\": \"object\",\r",
											"                            \"properties\": {\r",
											"                                \"authStrategyId\": {\r",
											"                                \"type\": \"integer\"\r",
											"                                },\r",
											"                                \"authStrategyName\": {\r",
											"                                \"type\": \"string\"\r",
											"                                },\r",
											"                                \"isInheritedFromParent\": {\r",
											"                                \"type\": \"boolean\"\r",
											"                                }\r",
											"                            }\r",
											"                          }\r",
											"                      ]\r",
											"                    }                    \r",
											"                  }\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"children\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"actions\",\r",
											"            \"_defaultAuthorizationStrategiesForCRUD\",\r",
											"            \"authorizationStrategyOverridesForCRUD\",\r",
											"            \"children\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"_isSystemReserved\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"_applications\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"resourceClaims\",\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"_isSystemReserved\",\r",
											"    \"_applications\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"GET ClaimSetId after overriding Authorization Strategy: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(GetClaimSetsIdSchema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimsets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimsets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy - Action not enabled",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy - Action not enabled: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy - Action not enabled: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy - Action not enabled: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy - Action not enabled: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Action.length).to.equal(1);\r",
											"    pm.expect(response.errors.Action[0]).to.contain(\"action is not enabled for the resource claim\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"delete\",\r\n  \"authorizationStrategies\": [\r\n    \"RelationshipsWithStudentsOnly\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4",
										"overrideAuthorizationStrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy System Reserved: Response errors include system reserved message\", function () {\r",
											"     pm.expect(response.errors.ClaimSetId.length).to.equal(1)\r",
											"    pm.expect(response.errors.ClaimSetId[0]).to.contain(\"system reserved\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"create\",\r\n  \"authorizationStrategies\": [\r\n    \"RelationshipsWithStudentsOnly\"\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}/resourceClaimActions/4/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}",
										"resourceClaimActions",
										"4",
										"overrideAuthorizationStrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Override Auth Strategy Validation Errors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST OverrideAuthStrategy Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST OverrideAuthStrategy Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.ResourceClaim.length).to.equal(1);\r",
											"    pm.expect(response.errors.ResourceClaim[0]).to.contain(\"doesn't exist\");\r",
											"    pm.expect(response.errors.AuthorizationStrategies.length).to.equal(1);\r",
											"    pm.expect(response.errors.AuthorizationStrategies[0]).to.contain(\"doesn't exist\");\r",
											"    pm.expect(response.errors.ActionName.length).to.equal(1);\r",
											"    pm.expect(response.errors.ActionName[0]).to.contain(\"doesn't exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"actionName\": \"NotExist\",\r\n  \"authorizationStrategies\": [\"RelationshipsWithStudentsOnlys\"]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4000/overrideAuthorizationStrategy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4000",
										"overrideAuthorizationStrategy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Authorization Strategies",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthorizationStrategies: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4/resetAuthorizationStrategies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4",
										"resetAuthorizationStrategies"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Authorization Strategies System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthorizationStrategies System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ResetAuthorizationStrategies System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResetAuthorizationStrategies System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ResetAuthorizationStrategies System Reserved: Response errors include system reserved message\", function () {\r",
											"     pm.expect(response.errors.claimSetId.length).to.equal(1)\r",
											"    pm.expect(response.errors.claimSetId[0]).to.contain(\"system reserved\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}/resourceClaimActions/4/resetAuthorizationStrategies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}",
										"resourceClaimActions",
										"4",
										"resetAuthorizationStrategies"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Reset Authorization Strategies Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ResetAuthorizationStrategies: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/40000/resetAuthorizationStrategies",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"40000",
										"resetAuthorizationStrategies"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE ResourceClaimOnClaimSet System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE ResourceClaimOnClaimSet System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE ResourceClaimOnClaimSet System Reserved: Response errors include system reserved message\", function () {\r",
											"     pm.expect(response.errors.claimSetId.length).to.equal(1)\r",
											"    pm.expect(response.errors.claimSetId[0]).to.contain(\"system reserved\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}/resourceClaimActions/4",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}",
										"resourceClaimActions",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "ResourceClaimClaimSets - Delete Not Found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ResourceClaimOnClaimSet: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/resourceClaimActions/4000",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"resourceClaimActions",
										"4000"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy- Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"      \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"OtherClaimSetGUID\", pm.variables.replaceIn('{{$guid}}'));\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"      \"name\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"      \"resourceClaims\": []\r",
											"    }), \r",
											"  }\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const id = claimSetResponse.headers.get(\"Location\").split(\"/\")[2];\r",
											"  if(!id) { console.log('Error in Pre-request: claimset ID missing from response'); }\r",
											"  pm.collectionVariables.set(\"OtherExistingClaimSetId\", id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\",\r\n    \"resourceClaims\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets/${pm.collectionVariables.get(\"CreatedClaimSetId\")}/resourceClaimActions`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw:JSON.stringify({\r",
											"       \"resourceClaimId\": 9,\r",
											"           \"resourceClaimActions\": [\r",
											"                {\r",
											"                \"name\": \"read\",\r",
											"                \"enabled\": true\r",
											"                },\r",
											"                {\r",
											"                \"name\": \"create\",\r",
											"                \"enabled\": true\r",
											"                }            \r",
											"        ]\r",
											"    })\r",
											" }\r",
											"},\r",
											"function (claimSetErr) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); } \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSets: Status code is Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSets: Response includes location in header\", function () {\r",
											" pm.response.to.have.header(\"Location\");\r",
											" const id = pm.response.headers.get(\"Location\").split(\"/\")[2];\r",
											" pm.response.to.be.header(\"Location\", `/claimSets/${id}`);\r",
											" pm.collectionVariables.set(\"CopiedClaimSetId\", id);\r",
											" });\r",
											"\r",
											" let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${pm.variables.get(\"API_URL\")}/v2/claimsets/${pm.collectionVariables.get(\"CopiedClaimSetId\")}`,\r",
											"    method: 'GET',\r",
											"    header: header\r",
											"},\r",
											"\r",
											"function (err, response) {\r",
											"if(err) \r",
											"{ \r",
											" console.log(\"Error :\", err); \r",
											"} \r",
											" const result = response.json();\r",
											"    pm.test(\"POST ClaimSets: Response result claimset has expected name and resource claims\", function () {\r",
											"    pm.expect(result).to.have.property(\"id\");\r",
											"    pm.expect(result).to.have.property(\"name\");\r",
											"    pm.expect(result.name).contains(\"Copied ClaimSet from\");\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"    const resourceclaimexists = result.resourceClaims.any(r => r.name === \"educationStandards\")\r",
											"    pm.expect(resourceclaimexists).to.equal(true);\r",
											" });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Copied ClaimSet from {{CreatedClaimSetId}}\",\r\n    \"originalid\": {{CreatedClaimSetId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/copy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"copy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets/Copy- Invalid ClaimSet Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomIntFromInterval(min, max) { // min and max included \r",
											"  return Math.floor(Math.random() * (max - min + 1) + min)\r",
											"}\r",
											"\r",
											"const rndInt = randomIntFromInterval(450, 783)\r",
											"pm.collectionVariables.set(\"NotExistClaimSetId\", pm.variables.replaceIn(rndInt));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"POST ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.title).to.contains(\"Not found\");\r",
											"    pm.expect(response.title).to.contains(\"claimset\");    \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Claim set does not exists\",\r\n    \"originalid\": {{NotExistClaimSetId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/copy",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"copy"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimsets/${pm.collectionVariables.get(\"CreatedClaimSetId\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"\r",
											"function (err, response) {\r",
											"  if(err) \r",
											"  { \r",
											"    console.log(\"Error :\", err); \r",
											"  } \r",
											"  const result = response.json();\r",
											"pm.test(\"PUT ClaimSets: Response result includes updated claimset\", function () {\r",
											"    pm.expect(result.name).to.equal(\"Updated Test ClaimSet\");\r",
											"    pm.expect(result._isSystemReserved).to.equal(false);\r",
											"    pm.expect(result._applications).to.be.empty;\r",
											"    pm.expect(result.resourceClaims).to.not.be.empty;\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated Test ClaimSet\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid JSON",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Json: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Json: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"Name\"].length).to.equal(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{CreatedClaimSetId}},    \r\n\t\"noname\": \"Not-Valid\",\r\n    \"window\": {\r\n        \"title\": \"Sample Konfabulator Widget\",\r\n        \"name\": \"main_window\",\r\n        \"width\": 500,\r\n        \"height\": 500\r\n    },\r\n    \"image\": { \r\n        \"src\": \"Images/Sun.png\",\r\n        \"name\": \"sun1\",\r\n        \"hOffset\": 250,\r\n        \"vOffset\": 250,\r\n        \"alignment\": \"center\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Invalid Existing ClaimSet Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets Invalid Existing ClaimSets: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors.Name.length).to.equal(1);\r",
											"    pm.expect(response.errors.Name[0]).to.contain(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Other Test ClaimSet {{OtherClaimSetGUID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/claimSets?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"  method: 'GET',\r",
											"  header: header\r",
											"},\r",
											"function (claimSetErr, claimSetResponse) {\r",
											"  if(claimSetErr) { console.log(\"Error in Pre-request:\", claimSetErr); }\r",
											"  const claimSets = claimSetResponse.json();\r",
											"  if(!claimSets) { console.log('Error in Pre-request: ClaimSets missing from response.'); }\r",
											"  const systemReservedClaimSetIds = claimSets.map(\r",
											"        function(claimSet) { \r",
											"            if(claimSet._isSystemReserved)\r",
											"            {\r",
											"                return claimSet.id;\r",
											"            } \r",
											"        }\r",
											"    );\r",
											"  if(!systemReservedClaimSetIds) { console.log('Error in Pre-request: System Reserved claimset IDs not found. Response is:', claimSets); }\r",
											"  pm.collectionVariables.set(\"SystemReservedClaimSetId\", systemReservedClaimSetIds[0]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSets System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSets System Reserved: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Update System Reserved ClaimSet\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DELETE ClaimSets: Status code is OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DELETE ClaimSets: Response matches success format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DELETE ClaimSets: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"claimset\");\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											"\r",
											"const DeleteClaimSetsSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"DELETE ClaimSet: Validation Schema Response\", () => {\r",
											"    pm.response.to.have.jsonSchema(DeleteClaimSetsSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - System Reserved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSets System Reserved: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets System Reserved: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"AB Connect\", \"system reserved\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"SystemReservedClaimSetId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{SystemReservedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{SystemReservedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - With Applications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSets With Application: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"validation\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSets With Application: Response errors include messages by property\", function () {\r",
											"    pm.expect(response.errors[\"id\"].length).to.equal(1);\r",
											"    [\"Cannot delete\", \"associated application\"].forEach((substring) => {\r",
											"        pm.expect(response.errors.id[0]).to.contain(substring);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"OtherApplicationId\");\r",
											"pm.collectionVariables.unset(\"OtherApplicationVendorId\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let header = {\r",
											"    \"Content-Type\": \"application/json\",\r",
											"    \"Authorization\": `Bearer ${pm.collectionVariables.get(\"TOKEN\")}`\r",
											"};\r",
											"\r",
											"if (pm.variables.get(\"isMultitenant\") == \"true\") {\r",
											"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;\r",
											"}\r",
											"\r",
											"pm.sendRequest({\r",
											"  url: `${pm.variables.get(\"API_URL\")}/v2/vendors`,\r",
											"  method: 'POST',\r",
											"  header: header,\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({\r",
											"      \"company\": \"Other Company\",\r",
											"      \"namespacePrefixes\": \"uri://ed-fi.org\",\r",
											"      \"contactName\": \"Other Application User\",\r",
											"      \"contactEmailAddress\": \"otherapplication@example.com\"\r",
											"    }),\r",
											"  }\r",
											"},\r",
											"  function (vendorErr, vendorResponse) {\r",
											"    if (vendorErr) { console.log(\"Error in Pre-request:\", vendorErr); }\r",
											"    console.log(vendorResponse.headers.get(\"Location\"));\r",
											"    const vendorId = vendorResponse.headers.get(\"Location\").split(\"/\")[2];\r",
											"    if (!vendorId) { console.log('Error in Pre-request: vendorID missing from response'); }\r",
											"    pm.collectionVariables.set(\"OtherApplicationVendorId\", vendorId);\r",
											"\r",
											"\r",
											"    pm.sendRequest({\r",
											"      url: `${pm.variables.get(\"API_URL\")}/v2/odsInstances?offset=${pm.variables.get(\"offset\")}&limit=${pm.variables.get(\"limit\")}`,\r",
											"      method: 'GET',\r",
											"      header: header\r",
											"    },\r",
											"      function (err, response) {\r",
											"        if (err) { console.log(\"Error in Pre-request:\", err); }\r",
											"        const json = response.json();\r",
											"        if (!json[0].id) { console.log('Error in Pre-request: odsInstancesID missing from response. Response is:', json); }\r",
											"        else {\r",
											"          pm.collectionVariables.set(\"ODSInstanceId\", json[0].id);\r",
											"        }\r",
											"\r",
											"\r",
											"        pm.sendRequest({\r",
											"          url: `${pm.variables.get(\"API_URL\")}/v2/applications`,\r",
											"          method: 'POST',\r",
											"          header: header,\r",
											"          body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"              \"applicationName\": \"Other Vendor Application\",\r",
											"              \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"              \"claimSetName\": \"Ed-Fi Sandbox\",\r",
											"              \"profileIds\": [],\r",
											"              \"educationOrganizationIds\": [255901],\r",
											"              \"odsInstanceIds\": [pm.collectionVariables.get(\"ODSInstanceId\")]\r",
											"            }),\r",
											"          }\r",
											"        },\r",
											"          function (appErr, appResonse) {\r",
											"            if (appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"            console.log(appResonse.headers.get(\"Location\"));\r",
											"            const appId = appResonse.headers.get(\"Location\").split(\"/\")[2];\r",
											"            if (!appId) { console.log('Error in Pre-request: applicationId missing from response'); }\r",
											"            else {\r",
											"              pm.collectionVariables.set(\"OtherApplicationId\", appId);\r",
											"            }\r",
											"            pm.sendRequest({\r",
											"              url: `${pm.variables.get(\"API_URL\")}/v2/applications/${pm.collectionVariables.get(\"OtherApplicationId\")}`,\r",
											"              method: 'PUT',\r",
											"              header: header,\r",
											"              body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                  \"applicationName\": \"ClaimSet Test Vendor Application\",\r",
											"                  \"vendorId\": pm.collectionVariables.get(\"OtherApplicationVendorId\"),\r",
											"                  \"claimSetName\": `Other Test ClaimSet ${pm.collectionVariables.get(\"OtherClaimSetGUID\")}`,\r",
											"                  \"profileIds\": [],\r",
											"                  \"educationOrganizationIds\": [255901],\r",
											"                  \"odsInstanceIds\": [pm.collectionVariables.get(\"ODSInstanceId\")]\r",
											"                }),\r",
											"              }\r",
											"            },\r",
											"              function (appErr) {\r",
											"                if (appErr) { console.log(\"Error in Pre-request:\", appErr); }\r",
											"              });\r",
											"          });\r",
											"      });\r",
											"  });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{OtherExistingClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{OtherExistingClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Export - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"GET ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}/export",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}",
										"export"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PUT ClaimSet NotFound: Status code is Bad Request\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"PUT ClaimSet NotFound: Response matches error format\", function () {\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"PUT ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    pm.expect(response.title.toLowerCase()).to.contain(\"deleted\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited-ClaimSet\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ClaimSets - Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"DEL ClaimSet NotFound: Status code is Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSet NotFound: Response matches error format\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"DEL ClaimSet NotFound: Response title is helpful and accurate\", function () {\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    pm.expect(response.title).to.contain(\"Not found\");\r",
											"    pm.expect(response.title).to.contain(\"claimset\");\r",
											"    pm.expect(response.title).to.contain(pm.collectionVariables.get(\"CreatedClaimSetId\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"CreatedClaimSetId\");\r",
											"pm.collectionVariables.unset(\"OtherExistingClaimSetId\");\r",
											"pm.collectionVariables.unset(\"ClaimSetGUID\");\r",
											"pm.collectionVariables.unset(\"OtherClaimSetGUID\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/v2/claimSets/{{CreatedClaimSetId}}",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"v2",
										"claimSets",
										"{{CreatedClaimSetId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function generateClientSecret() {",
					"    const minLength = 32;",
					"    const maxLength = 128;",
					"    let result = '';",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    const specialCharacters = '!@#$%^&*()_+{}:\"<>?|[];\\',./`~';",
					"    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;",
					"",
					"    result += randomChar('abcdefghijklmnopqrstuvwxyz');",
					"    result += randomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ');",
					"    result += randomChar('0123456789');",
					"    result += randomChar(specialCharacters);",
					"",
					"    for (let i = result.length; i < length; i++) {",
					"        const charactersPlusSpecial = characters + specialCharacters;",
					"        result += charactersPlusSpecial.charAt(Math.floor(Math.random() * charactersPlusSpecial.length));",
					"    }",
					"",
					"    return shuffleString(result);",
					"}",
					"",
					"function randomChar(str) {",
					"    return str.charAt(Math.floor(Math.random() * str.length));",
					"}",
					"",
					"function shuffleString(str) {",
					"    const array = str.split('');",
					"    for (let i = array.length - 1; i > 0; i--) {",
					"        const j = Math.floor(Math.random() * (i + 1));",
					"        [array[i], array[j]] = [array[j], array[i]];",
					"    }",
					"    return array.join('');",
					"}",
					"",
					"let guid = pm.variables.replaceIn('{{$guid}}');",
					"let client_secret =  generateClientSecret();",
					"",
					"let header = {",
					"    'Content-Type': 'application/x-www-form-urlencoded'",
					"};",
					"",
					"if (pm.variables.get(\"isMultitenant\") == \"true\") {",
					"    header['Tenant'] = `${pm.variables.get(\"tenant1\")}`;",
					"    pm.request.headers.upsert({key: 'Tenant', value: `${pm.variables.get(\"tenant1\")}` });",
					"}",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/register`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'ClientId', value: guid },",
					"            {key: 'ClientSecret', value: client_secret },",
					"            {key: 'DisplayName', value: guid }",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"",
					"pm.sendRequest({",
					"    url: `${pm.variables.get(\"API_URL\")}/connect/token`,",
					"    method: 'POST',",
					"    header: header,",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: guid },",
					"            {key: 'client_secret', value: client_secret },",
					"            {key: 'grant_type', value: \"client_credentials\"},",
					"            {key: 'scope', value: \"edfi_admin_api/full_access\"}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        error = res.json().error",
					"        if(error) {",
					"            throw res.json().error_description",
					"        }",
					"        pm.collectionVariables.set(\"TOKEN\", res.json().access_token)",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": ""
		},
		{
			"key": "NotExistClaimSetId",
			"value": ""
		},
		{
			"key": "RegisteredClientId",
			"value": ""
		},
		{
			"key": "RegisteredClientSecret",
			"value": ""
		},
		{
			"key": "ImportClaimSetGUID",
			"value": ""
		},
		{
			"key": "WrongNameClaimSetGUID",
			"value": ""
		},
		{
			"key": "InvalidParentClaimSetGUID",
			"value": ""
		},
		{
			"key": "DuplicateClaimSetGUID",
			"value": ""
		},
		{
			"key": "CopiedClaimSetId",
			"value": ""
		},
		{
			"key": "ODSInstanceId",
			"value": ""
		}
	]
}